{
  "trial_type": "IPCase",
  "date": {
    "era": "Reiwa",
    "year": 3,
    "month": 12,
    "day": 20
  },
  "case_number": "令和3(行ケ)10060",
  "case_name": "審決取消請求事件",
  "court_name": "知的財産高等裁判所",
  "right_type": "特許権",
  "lawsuit_type": "行政訴訟",
  "lawsuit_id": "90807",
  "detail_page_link": "https://www.courts.go.jp/app/hanrei_jp/detail7?id=90807",
  "full_pdf_link": "https://www.courts.go.jp/app/files/hanrei_jp/807/090807_hanrei.pdf",
  "contents": "令和３年１２月２０日判決言渡\n令和３年（行ケ）第１００６０号  審決取消請求事件\n口頭弁論終結日  令和３年１１月１１日\n判              決\n原              告          株 式 会 社 三 菱 Ｕ Ｆ Ｊ 銀 行\n同訴訟代理人弁護士          高    橋    雄  一  郎\n同                          阿    部    実  佑  季\n同訴訟代理人弁理士          林              佳    輔\n同                          荒    尾    達    也\n被              告          特 許 庁 長 官\n同指定代理人           須    田    勝    巳\n同                          田    中    秀    人\n同                          梶    尾    誠    哉\n同                          金    子    秀    彦\n主              文\n１  原告の請求を棄却する。\n２  訴訟費用は原告の負担とする。\n事実及び理 由\n第１  請求\n特許庁が不服２０２０－１２５４３号事件について令和３年３月１９日に\nした審決を取り消す。\n第２  事案の概要\n本件は，特許拒絶査定の不服審判請求を不成立とした審決の取消訴訟である。\n１  特許庁における手続の経緯等（当事者間に争いがない。）\n⑴  原告は，令和元年７月９日，名称を「システムおよび処理方法」とする発\n明について，特許出願（特願２０１９－１２７８９４号。以下「本件出願」\nという。）をしたが，令和２年６月２２日付けの拒絶査定を受けた。\n⑵  原告は，令和２年９月８日，同日付け手続補正書を提出するとともに（以\n下，この手続補正書による補正を「本件補正」という。），拒絶査定不服審判\nを請求した。\n特許庁は，上記請求を不服２０２０－１２５４３号事件として審理を行い，\n令和３年３月１９日，本件補正を却下した上で，「本件審判の請求は，成り立\nたない。」との審決（以下「本件審決」という。）をし，その謄本は，同年４\n月６日，原告に送達された\n⑶  原告は，令和３年４月２８日，本件審決の取消しを求める本件訴訟を提起\nした。\n２  特許請求の範囲の記載\n本件補正前の特許請求の範囲の記載は，請求項１ないし１０からなり，その\n請求項の記載は下記⑴のとおりであり（以下，請求項１に係る発明を「本願発\n明」という。），本件補正後の特許請求の範囲の記載は，請求項１ないし８から\nなり（特許請求の範囲は全文変更），その請求項の記載は下記⑵のとおりである\n（以下，本件補正後の請求項１に係る発明を「本件補正発明」という。下線部\nは，本件補正による補正箇所である。）。\n⑴  本件補正前の特許請求の範囲の記載\nア  請求項１（本願発明）\n台帳を分散して記録する複数のノードの少なくとも１つに対し，トラン\nザクションのリクエストを送信する複数のプロセスを生成する生成部と，\nトランザクションの指示を受け付け，前記複数のプロセスのいずれかに\n当該トランザクションのリクエスト送信を割り当てる割当部と，を備える\nシステム。\nイ  請求項２\n前記複数のプロセスは，第１プロセスおよび第２プロセスを含み，\n前記第１プロセスが前記リクエストを送信するノードは，前記第２プロ\nセスが前記リクエストを送信するノードと同一である，請求項１に記載の\nシステム。\nウ  請求項３\n前記割当部は，ラウンドロビン方式により前記トランザクションのリク\nエスト送信を割り当てる，請求項１または請求項２に記載のシステム。\nエ  請求項４\n前記複数のノードで形成されるネットワークにおける所定のトランザク\nションのリクエストに対する平均スループットとプロセス多重度との関\n係において，プロセス多重度の増加に対する平均スループットの増加の割\n合が，プロセス多重度が第１値のときに第１割合であり，当該第１値より\n大きい第２値以上であるときに前記第１割合より小さい第２割合であり，\n前記複数のプロセスの数は，前記第２値よりも小さい数で設定される，\n請求項１から請求項３のいずれかに記載のシステム。\nオ  請求項５\n前記複数のノードで形成されるネットワークは，コンソーシアム型であ\nる，請求項１から請求項４のいずれかに記載のシステム。\nカ  請求項６\nコンピュータが実行する処理方法であって，\nトランザクションの指示を受け付け，\n台帳を分散して記録する複数のノードの少なくとも１つに対し，トラン\nザクションのリクエストを送信する複数のプロセスのいずれかに，前記指\n示に基づくトランザクションのリクエスト送信を割り当てる，処理方法。\nキ  請求項７\n前記複数のプロセスは，第１プロセスおよび第２プロセスを含み，\n前記第１プロセスが前記リクエストを送信するノードは，前記第２プロ\nセスが前記リクエストを送信するノードと同一である，請求項６に記載の\n処理方法。\nク  請求項８\n前記トランザクションのリクエスト送信を割り当てるときには，ラウン\nドロビン方式を用いる，請求項６または請求項７に記載の処理方法。\nケ  請求項９\n前記複数のノードで形成されるネットワークにおける所定のトランザク\nションのリクエストに対する平均スループットとプロセス多重度との関\n係において，プロセス多重度の増加に対する平均スループットの増加の割\n合が，プロセス多重度が第１値のときに第１割合であり，当該第１値より\n大きい第２値以上であるときに前記第１割合より小さい第２割合であり，\n前記複数のプロセスの数は，前記第２値よりも小さい数で設定される，\n請求項６から請求項８のいずれかに記載の処理方法。\nコ  請求項１０\n前記複数のノードで形成されるネットワークは，コンソーシアム型であ\nる，請求項６から請求項９のいずれかに記載の処理方法。\n⑵  本件補正後の特許請求の範囲の記載\nア  請求項１（本件補正発明）\n管理主体が存在しないパブリック型ネットワークにおいて台帳を分散して\n記録する複数のノードの少なくとも１つに対し，トランザクションのリクエ\nストを送信する複数のプロセスであって，設定されるプロセス多重度に応じ\nた複数のプロセスを生成する生成部と，\nトランザクションの指示を受け付け，前記複数のプロセスのいずれかに当\n該トランザクションのリクエスト送信を割り当てる割当部と，を備えるシス\nテム。\nイ  請求項２\n前記複数のプロセスは，第１プロセスおよび第２プロセスを含み，\n前記第１プロセスが前記リクエストを送信するノードは，前記第２プロ\nセスが前記リクエストを送信するノードと同一である，請求項１に記載の\nシステム。\nウ  請求項３\n前記割当部は，ラウンドロビン方式により前記トランザクションのリク\nエスト送信を割り当てる，請求項１または請求項２に記載のシステム。\nエ  請求項４\n前記複数のノードで形成されるネットワークにおける所定のトランザク\nションのリクエストに対する平均スループットと前記プロセス多重度と\nの関係において，当該プロセス多重度の増加に対する平均スループットの\n増加の割合が，プロセス多重度が第１値のときに第１割合であり，当該第\n１値より大きい第２値以上であるときに前記第１割合より小さい第２割\n合であり，\n前記複数のプロセスの数は，前記第２値よりも小さい数で設定される，\n請求項１から請求項３のいずれかに記載のシステム。\nオ  請求項５\nコンピュータが実行する処理方法であって，\nトランザクションの指示を受け付け，\n管理主体が存在しないパブリック型ネットワークにおいて台帳を分散し\nて記録する複数のノードの少なくとも１つに対し，トランザクションのリ\nクエストを送信する複数のプロセスであって，設定されるプロセス多重度\nに応じた複数のプロセスのいずれかに，前記指示に基づくトランザクショ\nンのリクエスト送信を割り当てる，処理方法。\nカ  請求項６\n前記複数のプロセスは，第１プロセスおよび第２プロセスを含み，\n前記第１プロセスが前記リクエストを送信するノードは，前記第２プロ\nセスが前記リクエストを送信するノードと同一である，請求項５に記載の\n処理方法。\nキ  請求項７\n前記トランザクションのリクエスト送信を割り当てるときには，ラウン\nドロビン方式を用いる，請求項５または請求項６に記載の処理方法。\nク  請求項８\n前記複数のノードで形成されるネットワークにおける所定のトランザク\nションのリクエストに対する平均スループットと前記プロセス多重度と\nの関係において，当該プロセス多重度の増加に対する平均スループットの\n増加の割合が，プロセス多重度が第１値のときに第１割合であり，当該第\n１値より大きい第２値以上であるときに前記第１割合より小さい第２割\n合であり，\n前記複数のプロセスの数は，前記第２値よりも小さい数で設定される，\n請求項５から請求項７のいずれかに記載の処理方法。\n３  本件審決の理由の要旨\n本件審決は，本件補正発明は甲第１号証「佐藤竜也ほか，ブロックチェーン\n基盤Ｈｙｐｅｒｌｅｄｇｅｒ  Ｆａｂｒｉｃの性能評価と課題整理，電子情報通信学会技術研究\n報告，一般社団法人電子情報通信学会，２０１７年２月２４日，第１１６巻，\n第４９１号，ｐ.１６７－１７４」（以下「引用文献１」という。）に記載の発明\n（以下「引用発明」という。）と甲第２号証「特開２０１９－１４１３５号公報」\n（平成３１年１月３１日出願公開。以下「引用文献２」という。）及び甲第３号\n証「特開２０１０－２７８６３９号公報」（以下「引用文献３」という。）に記\n載の周知技術に基づいて当業者が容易に発明することができたものであるから，\n本件補正は独立特許要件（特許法１７条の２第６項で準用する同法１２６条７\n項）を満たさないので却下すべきものであり（同法１５９条１項の規定におい\nて読み替えて準用する同法５３条１項），本願発明も引用発明と引用文献２及\nび３に記載の周知技術に基づいて当業者が容易に発明できたものであるから，\n本件出願は拒絶すべきものと判断した（以下，本件出願に係る願書に添付した\n明細書を，図面を含めて「本願明細書」という。別紙１参照）。その判断の要旨\nは以下のとおりである。\n⑴  本件補正発明について\nア  引用発明の認定\nブロックチェーン（Ｂｌｏｃｋｃｈａｉｎ，ＢＣ）基盤のＯＳＳプロジェクトである\nＨｙｐｅｒｌｅｄｇｅｒの基盤実装の一つであるＦａｂｒｉｃについて性能を中心とした評\n価を行うものであって，\nＦａｂｒｉｃは，コンソーシアムあるいはプライベート型での利用を想定した\nＢＣ基盤であり，\nマルチホスト上にまたがった環境上にＦａｂｒｉｃによるＢＣネットワーク\nを構築し，その上で性能測定を行うものであって，\nクライアントからＲＥＳＴ経由でＢＣネットワークにアクセスし，チェ\nーンコードを実行して負荷をかけることで性能測定を行うものであり，\n負荷をかける際には，複数のクライアントからの同時アクセスを模擬す\nるため，マルチスレッドでトランザクションを並列実行するものであって，\nクライアントによる負荷生成ツールプログラムの処理の流れは，スレッ\nド毎に実行トランザクション（ｉｎｖｏｋｅ）を指定した回数繰り返す（並列実\n行）ことを含むものであり，\nスループット測定結果は，並列スレッド数を増やしていくとスループッ\nトも増加する傾向にあるが，ある程度並列度を増やすとスループットは頭\n打ちとなり，スループットが頭打ちになった後も，それ以上に並列度を増\nやしていくと，挙動が安定しなくなる場合があるため，フロント側でリク\nエストの流量制御を行う等の対策が必要となり得る，\nＢＣ基盤Ｈｙｐｅｒｌｅｄｇｅｒ  Ｆａｂｒｉｃの性能評価。\nイ  本件補正発明と引用発明との一致点\nネットワークにおいて台帳を分散して記録する複数のノードの少なくと\nも１つに対し，トランザクションのリクエストを送信する複数の処理単位\nであって，複数の処理単位を生成する生成部と，\n前記複数の処理単位のいずれかに当該トランザクションのリクエスト送\n信を割り当てる割当部と，を備えるシステム。\nウ  本件補正発明と引用発明との相違点\n(ア)  相違点１\n本件補正発明は，「管理主体が存在しないパブリック型」ネットワーク\nであるのに対して，引用発明の，ブロックチェーン基盤実装の一つであ\nる「Ｆａｂｒｉｃ」は，「コンソーシアムあるいはプライベート型での利用を想\n定したＢＣ基盤」である点。\n(イ)  相違点２\n本件補正発明は，処理単位が「プロセス」であって，生成部が複数の\n「プロセス」を生成し，割当部が前記複数の「プロセス」のいずれかに\nトランザクションのリクエスト送信を割り当てるものであるのに対して，\n引用発明は，処理単位が「スレッド」である点。\n(ウ)  相違点３\n本件補正発明は，生成部が「設定されるプロセス多重度に応じた」複\n数のプロセスを生成するものであるのに対して，引用発明は，そのよう\nな特定がなされていない点。\n(エ)  相違点４\n本件補正発明は，割当部が「トランザクションの指示を受け付け」，複\n数のプロセスのいずれかにトランザクションのリクエスト送信を割り当\nてるのに対して，引用発明は，そのような特定がなされていない点。\nエ  相違点の容易想到性\n(ア)  相違点１\n引用発明は，コンソーシアムあるいはプライベート型での利用を想定\nしているとはいえ，引用発明を管理主体が存在しないパブリック型のブ\nロックチェーンには適用できないとする技術的根拠は何ら認められない\nところ，引用発明を管理主体が存在しないパブリック型のネットワーク\nに適用することには何ら技術的創意は見出せず，当業者であれば適宜実\n施し得る事項にすぎない。\n(イ)  相違点２\n引用発明において，マルチプロセスを採用して処理単位をプロセスと\nすることは，引用文献２及び３に示される周知技術に基づいて当業者が\n適宜なし得るものであり，さらに，甲第４号証「特開２０１５－８８１\n７６号公報」（以下「甲４文献」という。）に示されるように，プログラ\nムを実行する単位である複数のプロセスを生成し，クライアント端末か\nら受け取ったリクエストを，前記複数のプロセスのうちの何れかのプロ\nセスに割り当てることが，複数のプロセスを用いたプログラム実行にお\nける極めて一般的な処理であることも踏まえれば，引用発明にマルチプ\nロセスを採用した際に，生成部が複数の「プロセス」を生成し，割当部\nが前記複数の「プロセス」のいずれかにトランザクションのリクエスト\n送信を割り当てるとすることも，当業者であれば当然になし得るものと\n認められる。\n(ウ)  相違点３\n引用発明では，「スループットが頭打ちになった後も，それ以上に並\n列度を増やしていくと，挙動が安定しなくなる場合があるため，フロン\nト側でリクエストの流量制御を行う等の対策が必要となり得る」として\nおり，これはフロント側でリクエスト送信を割り当てるスレッドの数を\n制限することを示唆するものであって，スレッドの多重度を制限するこ\nとを示唆するものである。\n上記(イ)のとおり，引用発明において，マルチスレッドに換えて「マ\nルチプロセス」を採用することは，当業者であれば適宜なし得る事項に\nすぎないと認められるところ，かかるマルチプロセスを採用した場合に，\nプロセス多重度を制限するため「プロセス多重度に応じた」複数のプロ\nセスを生成することは，リクエスト送信を割り当てるスレッドの数を制\n限するという上記示唆に基づいて，当業者であれば容易に想到し得るも\nのである。\n(エ)  相違点４\n上記(イ)のとおり，引用発明において，マルチプロセスを採用するこ\nとは当業者が適宜なし得る事項と認められるところ，引用発明の「ＢＣ\n基盤  Ｈｙｐｅｒｌｅｄｇｅｒ  Ｆａｂｒｉｃ」を実際のトランザクション処理に用いる\n場合，「トランザクションの指示を受け付け」て，複数のプロセスのいず\nれかにトランザクションのリクエスト送信を割り当てることは，当業者\nであれば当然になし得るものである。\n⑵  本願発明について\nア  本願発明と引用発明との一致点\n台帳を分散して記録する複数のノードの少なくとも１つに対し，トラン\nザクションのリクエストを送信する複数の処理単位を生成する生成部と，\n前記複数の処理単位のいずれかに当該トランザクションのリクエスト送\n信を割り当てる割当部と，を備えるシステム。\nイ  本願発明と引用発明との相違点\n(ア)  相違点ａ（相違点２と同じ）\n本願発明は，処理単位が「プロセス」であって，生成部が複数の「プ\nロセス」を生成し，割当部が前記複数の「プロセス」のいずれかにトラ\nンザクションのリクエスト送信を割り当てるものであるのに対して，引\n用発明は，処理単位が「スレッド」である点。\n(イ)  相違点ｂ（相違点４と同じ）\n本願発明は，割当部が「トランザクションの指示を受け付け」，複数の\nプロセスのいずれかにトランザクションのリクエスト送信を割り当てる\nのに対して，引用発明は，そのような特定がなされていない点。\nウ  相違点の容易想到性\n前記⑴エ(イ)及び(エ)のとおり，相違点ａ及び相違点ｂは，いずれも格\n別のものではない。\n４  取消事由\n本件補正発明の進歩性に関する判断（相違点３の容易想到性の有無）の誤り\n第３  当事者の主張\n１  原告\n⑴  相違点３の容易想到性の有無について\nア  引用文献１の記載事項に関して\n(ア)  本件審決は，「引用発明では，『スループットが頭打ちになった後も，\nそれ以上に並列度を増やしていくと，挙動が安定しなくなる場合がある\nため，フロント側でリクエストの流量制御を行う等の対策が必要となり\n得る』としており，これはフロント側でリクエスト送信を割り当てるス\nレッドの数を制限することを示唆するものであって，スレッドの多重度\nを制限することを示唆するものである。」（１９頁１６ないし２１行目）\nとするが，誤りであり，その結果，相違点３に係る容易想到性の判断に\nも誤りがある。\n引用文献１の「ＢＣサービス：Ｐ２Ｐプロトコル，分散台帳，コンセ\nンサスマネージャといった要素によって構成される。Ｐ２Ｐプロトコル\nにより，Ｐ２Ｐでの双方向ストリーミング，フロー制御，リクエストの\n多重化といった機能を提供する。既存ネットワークと連携して動作する。」\n（１６８頁右欄３６行ないし１６９頁左欄４行目）との記載によると，\n引用文献１では，「フロー制御」と「リクエストの多重化」とは異なる機\n能としており，この記載から想定される構成は別紙６「参考図１」のと\nおりである。同図に示されるように，上記「リクエストの多重化」は，\n１つのプロセスに流入するリクエストを複数のスレッドで多重化するこ\nとによってＢＣネットワークに出力するものであり，その１つのプロセ\nスに流入するリクエストの流量（フロー）を制御するのが上記「フロー\n制御」である。したがって，引用発明において，「挙動が安定しなくなる\n場合があるため，フロント側でリクエストの流量制御を行う等の対策」\nをとるのは，「フロー制御」（流量制御）であり，「リクエストの多重化」\nではない。\nここで，挙動の不安定を回避するための「フロー制御」は，技術常識\n上，「流量制御」と同じであるから（甲２１ないし２５），「リクエストの\n流量制御」は，技術常識上，①キュー長の調整又は②リクエスト送信頻\n度の低下のいずれかである（甲１９）。\nしたがって，引用文献１に「挙動が安定しなくなる場合があるため，\nフロント側でリクエストの流量制御を行う等の対策が必要となり得る」\n旨の記載があるからといって，引用文献１に「スレッドの数を制限する\nことを示唆する」記載があるとはいえず，「スレッドの多重度を制限する\nことを示唆する」記載があるともいえない。\n(イ)  被告は，引用文献１における「リクエストの流量制御」とは，単位\n時間当たりの「リクエスト総数」，すなわち，「スレッド当たりのリクエ\nスト数×スレッド数」を制御するものであって，「流量制御」を行うため\nに，スレッド数とリクエスト数の双方が制御の対象となっている旨主張\nするが，引用文献１には，「リクエストの流量制御」が単位時間当たりの\nリクエスト総数の制御であるとの記載はないし，仮に，「リクエスト流量\n制御」をすることが単位時間当たりの「リクエスト総数」を制御するこ\nとであったとしても，それが「スレッド当たりのリクエスト数×スレッ\nド数」を制御することに等しいということを引用文献１の開示事項から\n読み取ることはできない。\nまた，引用文献１においては，「負荷が大きすぎること」，すなわち「単\n位時間当たりのリクエスト数が大きすぎること」しか課題として認識で\nきておらず，「並列度が高すぎること」を課題として認識しているのでは\nないから，上記課題を認識するための手段としてスレッドの数を増加さ\nせてみた測定結果にすぎない記載をもって，「スレッド数（並列度）の制\n御」を，「リクエストの流量制御」における課題解決手段として用いるこ\nとができると読み取ることはできない。\nイ  スレッドとプロセスの置換に関して\n(ア)  被告は，生成部においてプロセス多重度を制限することは本件補正\n発明の発明特定事項に基づくものではない旨主張するが，本願明細書に\nは，「閾値Ｔｈｎよりも小さいプロセス多重度をプロセス１１０の数とし\nてプロセス生成装置１１に設定する」ことにより，「ブロックチェーンネ\nットワーク５における演算処理能力にボトルネックを発生させずに，リ\nクエストの送信側においてボトルネックを発生させることでき」，「プロ\nセス生成装置１１において不要なプロセス１１０を生成しないようにし\nて，リクエスト制御システム１のリソースを効率的に用いることができ\nる」（以上，本願明細書【００４６】，図１）との記載があるから，「設定\nされるプロセス多重度に応じた複数のプロセスを生成する生成部」とい\nう発明特定事項によれば，「リクエストの多重化を実現するプロセス数を\n必要な数に制御すること」や「不要なプロセスを生成せずにリソースを\n効率的に用いること」といった具体的な効果まで発明特定事項において\n特定されなくとも，本件補正発明がプロセス多重度を制限する構成とし\nて特定されたものといえるのは明らかである。\n(イ)  本件審決は，「マルチプロセスを採用した場合に，プロセスの多重度\nを制限するため『プロセスの多重度に応じた』複数のプロセスを生成す\nることは，リクエスト送信を割り当てるスレッドの数を制限するという\n上記示唆に基づいて，当業者であれば容易に想到し得るものである。」\n（１９頁２４ないし２８行目）とするが，誤りである。\n仮に，引用文献１に「スレッドの数を制限することを示唆するのであ\nって，スレッドの多重度を制限することを示唆する」旨の記載があると\nしても，マルチプロセスではない引用発明からは，１つのプロセスにお\nいてスレッドの多重度を制限することが示唆されるだけであって，プロ\nセス多重度を制限することまで示唆されることはない。\nまた，プロセスは１個のメモリ空間が割り当てられた実行プログラム\nであるのに対して，スレッドはプロセス内に所在してＣＰＵコアに対す\nる命令を実行する単位をいい，この両者はハードウェア資源の利用態様\nが相違するため，これらを相互に置換することはできない。すなわち，\n別紙６「参考図１」に示すように，引用発明は１つのプロセスにおいて\nマルチスレッドを実現するものであるから，プロセスがスレッドの多重\n度の制限をするが，一方，別紙７「参考図２」に示すように，本件補正\n発明におけるマルチプロセスの多重度は，各プロセスの生成を制御する\n生成部が制限する。このように，引用発明におけるスレッドとプロセス\nとの関係は，本件補正発明におけるプロセスと生成部との関係に対応す\nる。参考図１のような引用発明におけるスレッドとプロセスとの関係を，\n参考図２のような本件補正発明におけるプロセスと生成部との関係に置\n換することが容易想到であるという根拠は存在しない。\nウ  顕著な効果に関して\n本願明細書の記載（【００４６】，図１）によると，本件補正発明は，プ\nロセス生成装置において不要なプロセスを生成しないようにして，リクエ\nスト制御システムのリソースを効率的に用いることができるとの顕著な\n効果を奏する。\n一方，引用発明においては，別紙６「参考図１」に示すように，リクエ\nストの流量制御がリクエストの多重化の前段階のフロー制御で行われ，ス\nレッドの数は変わることがなく，不要なスレッドが残ったままであるから，\nリソースを効率的に用いることができない。\nエ  まとめ\n以上のとおり，相違点３を容易想到と判断した本件審決の判断には誤り\nがある。\n⑵  小括\n前記⑴からすれば，本件補正が独立特許要件を充足しないとした本件審決\nの判断には誤りがあり，本件補正を却下して本願発明が進歩性を欠如すると\nして本件出願を拒絶すべきものと判断した本件審決の判断にも，誤りがある。\n２  被告\n⑴  相違点３の容易想到性の有無について\nア  引用文献１の記載事項に関して\n(ア)  引用文献１には，スループットの計算方法を，「全スレッドによる合\n計リクエスト数／（全レスポンスが返ってきた時刻－リクエスト処理を\n開始した時刻）」とし，１スレッドあたりのリクエスト数を１０００ある\nいは２００に固定して（１７１頁左欄２４行ないし右欄７行目，１７１\n頁表３），スレッド数を変えながら測定した結果から，「ある程度並列度\nを増やすとスループットは頭打ちになった．」，「スループットが頭打ちに\nなった後も，それ以上に並列度を増やしていくと，内部的にエラーが発\n生する等，安定稼働が困難となる場合が見受けられた．」との評価が行わ\nれたことが開示されている（１７１頁右欄２７ないし３９行目，１７２\n頁図３及び１７２頁図４）。\nそうすると，引用文献１における，「高負荷を与えた場合には，挙動が\n安定しなくなる場合があるため，フロント側でリクエストの流量制御を\n行う等の対策が必要となり得る。」（１７１頁右欄２７ないし３９行目）\nとの記載における「リクエストの流量制御」とは，単位時間当たりの「リ\nクエスト総数」，すなわち，「スレッド当たりのリクエスト数×スレッド\n数」を制御するものであって，「流量制御」を行うために，スレッド数と\nリクエスト数の双方が制御の対象となっていると解されるから，スレッ\nド数を制限することも示唆されているというべきである。\nさらに，引用文献１には「２.３  本研究の課題  ＢＣの実適用に向け\nては，ＢＣ基盤およびその実装における現時点での技術課題の明確化が\n必要である．特に，金融業務への適用に向けては，一般的にトランザク\nションのスループットが性能面の最重要指標である．」（１６９頁左欄２\n９ないし３３行目），「図３にセキュリティ機能ＯＦＦ時の，図４にセキ\nュリティ機能ＯＮ時のｉｎｖｏｋｅ／ｑｕｅｒｙスループット測定結果を示す．図\nに示す通り，セキュリティ機能ＯＦＦ／ＯＮ時ともに，ｉｎｖｏｋｅとｑｕｅｒｙ\nの両方で，並列スレッド数を増やしていくとスループットも増加する傾\n向にあった．ただし，ある程度並列度を増やすとスループットは頭打ち\nとなった．また，スループットが頭打ちになった後も，それ以上に並列\n度を増やしていくと，内部的にエラーが発生する等，安定稼働が困難と\nなる場合が見受けられた．つまり，高負荷を与えた場合には，挙動が安\n定しなくなる場合があるため，フロント側でリクエストの流量制御を行\nう等の対策が必要となり得る．」（１７１頁右欄２７ないし３９行目）と\nの記載があるところ，これらの記載から，引用文献１には，トランザク\nションのスループットが性能面の最重要指標であり，並列スレッド数（並\n列度）を増やしていくとスループットが増加する傾向にあるが，ある程\n度並列度を増やしていくとスループットは頭打ちになり，さらに並列度\nを増やしていくと，高負荷が与えられて挙動が安定しなくなる場合があ\nるため，フロント側でリクエストの流量制御を行う等の対策が必要とな\nり得ることが開示されているといえる。\nそうすると，引用文献１には，並列度を増加させると高負荷となるの\nで，この高負荷を抑制するために流量制御を行う必要があるところ，こ\nの流量制御を行うための一つの手段として並列度を制限することが示唆\nされている。そして，上記流量制御を行うためには，「並列度」を増やし\nていって「挙動が安定しなくなる」手前の「並列度」，つまり，「挙動が\n不安定にならない最大の並列度」（適切な並列度）に制限する必要がある\nことが理解できる。\nしたがって，引用文献１には，並列スレッド数を制限することを示唆\nする記載があるといえる。\n(イ)  原告が引用する引用文献１の「ＢＣサービス：Ｐ２Ｐプロトコル，\n分散台帳，コンセンサスマネージャといった要素によって構成される．\nＰ２Ｐプロトコルにより，Ｐ２Ｐでの双方向ストリーミング，フロー制\n御，リクエストの多重化といった機能を提供する．既存ネットワークと\n連携して動作する．」との記載における「フロー制御」や「リクエストの\n多重化」は，「ＢＣサービス」の要素である「Ｐ２Ｐプロトコル」による\n機能として紹介されているのであるから，ここでいう「フロー制御」及\nび「リクエストの多重化」は，ブロックチェーンネットワークを構成す\nるノード同士の通信に関して説明したものであり，参考図１でいえば，\n最下部の「ＢＣネットワーク」の内部で行われる通信におけるものを指\nすにすぎない。\nイ  スレッドとプロセスの置換に関して\n(ア)  引用発明のマルチスレッドと本件補正発明の複数のプロセスは，と\nもに，トランザクションのリクエストを送信する複数の処理単位である\n点で共通しており，引用文献２及び３に記載される周知技術によれば，\n並列処理を実行するマルチスレッドとマルチプロセスは，相互に置き換\nえ可能なものである。\nそして，引用発明のマルチスレッドは本件補正発明の複数のプロセス\nに対応付けられるから，マルチスレッドを生成する生成部が，複数のプ\nロセスを生成する生成部に対応付けられることは自明である。\nしたがって，本件審決が，引用発明において，プロセス多重度に応じ\nた複数のプロセスを生成することを容易想到であると判断した点に誤り\nはない。\n(イ)  原告は，本件補正発明では，生成部においてリクエストの多重化を\n実現するプロセスの数を必要な数に制御することによって，不要なプロ\nセスを生成せずにリソースを効率的に用いることができると主張するが，\n相違点３に係る本件補正発明の発明特定事項は「設定されるプロセス多\n重度に応じた複数のプロセスを生成する生成部」であって，単に「プロ\nセス多重度」が「設定される」だけであって，「閾値Ｔｈｎよりも小さい\nプロセス多重度」が「設定される」ことは特定されていない。原告の主\n張は，本件補正発明の発明特定事項に基づくものではなく，失当である。\nウ  顕著な効果に関する主張について\n前記イ(イ)のとおり，原告の主張は，本件補正発明の発明特定事項に基\nづくものではなく，失当である。\nまた，本件補正発明のようにプロセス多重度を設定するものではない引\n用発明との対比によって，プロセス多重度に基づく本件補正発明が顕著な\n効果を奏すると主張することも失当である。\n⑵  小括\n相違点３を容易に想到できるとした本件審決の判断に誤りはないから，本\n件補正を却下すべきであるとした本件審決の判断にも誤りはなく，本願発明\nを審理の対象として進歩性を欠如するとして本件出願を拒絶すべきものと判\n断した本件審決の判断にも，誤りはない。\n第４  当裁判所の判断\n１  認定事実\n⑴  本願発明について\n本願明細書には，別紙１「本願明細書の記載事項（抜粋）」のとおりの記載\nがあり，この記載によると，本件出願に係る発明について，次のような開示\nがあると認められる。\nア  技術分野\n本件出願に係る発明は，トランザクションをブロックチェーンネットワ\nークにリクエストするための技術に関する（【０００１】）。\nイ  背景技術\nブロックチェーンを用いた分散型台帳技術が，ビットコイン等の暗号資\n産（仮想通貨）を管理する方法として用いられているが，近年では，これ\nらの技術は，このような暗号資産だけではなく，様々な資産を管理したり\n移動したりする方法として用いることも検討されている（【０００２】）。\nウ  発明が解決しようとする課題\n分散型台帳技術では，Ｐ２Ｐ（Ｐｅｅｒ  ｔｏ  Ｐｅｅｒ）によって接続された複数\nのノードによってネットワークが形成され，そのネットワークにおける複\n数のノードによって台帳が分散して記録されるところ，分散型台帳技術に\nおいては，ほとんどの場合，ブロックチェーンが台帳に記録され，台帳に\n直接記録されない場合でも何らかの形態で用いられる（【０００４】）。\nブロックチェーンネットワークを構成する各ノードによれば，互いが保\n持するデータの正当性を高めるために，所定のアルゴリズムによって合意\n形成が行われるが，これによって，データの改ざんが難しくなり，取引の\n信頼性が保たれるものの，一般的には合意形成の処理には多くの時間を要\nすると考えられているため，大量のトランザクションが発生するような処\n理に適用することは難しいと考えられている（【０００５】）。\n本件出願に係る発明の目的の一つは，分散型台帳技術を用いた場合でも，\n多くのトランザクションを効率よく処理することにある（【０００６】）。\nエ  課題を解決するための手段\n本件出願に係る発明の一実施形態によれば，台帳を分散して記録する複\n数のノードの少なくとも１つに対し，トランザクションのリクエストを送\n信する複数のプロセスを生成する生成部と，トランザクションの指示を受\nけ付け，前記複数のプロセスのいずれかに当該トランザクションのリクエ\nスト送信を割り当てる割当部と，を備えるシステムが提供される（【０００\n７】）。\n前記複数のノードで形成されるネットワークにおける所定のトランザク\nションのリクエストに対する平均スループットとプロセス多重度との関\n係において，プロセス多重度の増加に対する平均スループットの増加の割\n合が，プロセス多重度が第１値のときに第１割合であり，当該第１値より\n大きい第２値以上であるときに前記第１割合より小さい第２割合であり，\n前記複数のプロセスの数は，前記第２値よりも小さい数で設定されてもよ\nい（【００１０】）。\n前記複数のノードで形成されるネットワークは，コンソーシアム型であ\nってもよい（【００１１】）。\n本件出願に係る発明の一実施形態によれば，トランザクションの指示を\n受け付け，台帳を分散して記録する複数のノードの少なくとも１つに対し，\nトランザクションのリクエストを送信する複数のプロセスのいずれかに，\n前記指示に基づくトランザクションのリクエスト送信を割り当てる，処理\n方法が提供される（【００１２】）。\nオ  発明の効果\n本件出願に係る発明の一実施形態によれば，分散型台帳技術を用いた場\n合でも，多くのトランザクションを効率よく処理することができる（【００\n１７】）。\nカ  発明を実施するための形態\n(ア)  ブロックチェーンネットワーク５における演算処理能力にボトルネ\nックが存在する状況は，極めて多くの処理が集中した場合であって，実\n際には，その前の段階，すなわちトランザクションのリクエストを送信\nする側においてボトルネックが存在する場合が多いとの知見に基づき，\nリクエスト制御システム１では，ブロックチェーンネットワーク５にお\nける演算処理能力にボトルネックが存在する段階までリクエストを送信\nするためのプロセスを多重化することで，処理量を向上させることがで\nきる（【００２２】）。\n(イ)  実施形態のブロックチェーンネットワークは，管理主体が存在する\nコンソーシアム型（例えば，Ｑｕｏｒｕｍ，Ｈｙｐｅｒｌｅｄｇｅｒ  Ｆａｂｒｉｃ等）を想定\nしているが，管理主体が存在しないパブリック型（例えば，Ｅｔｈｅｒｅｕｍ\n等）であっても適用可能である。（【００２６】）。\n(ウ)  プロセス生成装置１１Ａは，設定装置３９から指定された数のプロ\nセス１１０を起動するとともに，各プロセス１１０においてトランザク\nションのリクエストを送信してから，ブロックチェーンネットワーク５\nにおいてトランザクションが分散型台帳に記録されたことを検出するま\nでの時間（以下「スループット」という。）を測定する。この測定したス\nループットを設定装置３９に送信する（【００４０】）。\n設定装置３９は，プロセス生成装置１１Ａ及び指示生成装置３８を制\n御して，プロセス多重度（プロセス１１０の数：ｍ個）を変更しつつ，\n１プロセス当たりの平均スループットを測定する。これによって，設定\n装置３９は，プロセス多重度と平均スループットとの関係を取得し，こ\nの関係を用いて，利用するブロックチェーンネットワーク５における最\n適なプロセス１１０の数を算出するが，この数は，上述したｎ個に相当\nするものとして，リクエスト制御システム１におけるプロセス生成装置\n１１に設定される（【００４２】）。\n図６は，本発明の一実施形態におけるプロセス多重度と平均スループ\nットとの関係を説明する図であるところ，プロセス多重度が低い場合，\nプロセス多重度の増加に伴い平均スループットは増加していくが，プロ\nセス多重度が大きくなると，プロセス多重度が増加しても，平均スルー\nプットは増加しなくなっていくように，プロセス多重度が大きい値Ｎ２\nである場合の平均スループットの増加の割合は，プロセス多重度が小さ\nい値Ｎ１（第１値）である場合の平均スループットの増加の割合（第１\n割合）よりも小さい（【００４４】）。特定のプロセス多重度における平均\nスループットの増加の割合は，図６に示すグラフにおいて，そのプロセ\nス多重度における傾き（微分値）に相当するところ，この増加の割合（増\n加率）がプロセス多重度の増加に対して大きく減少し始めるとき（第２\n割合）のプロセス多重度が，図６に示す閾値Ｔｈｎ（第２値）に対応す\nる（【００４４】）。\nこのように，閾値Ｔｈｎよりもプロセス多重度が小さい領域Ａ１にお\nいては，ブロックチェーンネットワーク５における演算処理能力にボト\nルネックがあるのではなく，リクエストを送信する側の処理にボトルネ\nックがあり，一方，閾値Ｔｈｎよりもプロセス多重度が大きい領域（判\n決注・前後の文脈から「量器」は「領域」の誤記と認める。）Ａ２におい\nては，プロセス多重度を増加させても，平均スループットがほとんど増\n加しないことから，ブロックチェーンネットワーク５における演算処理\n能力にボトルネックがあることが分かる（【００４５】）。\n設定装置３９が，閾値Ｔｈｎよりも小さいプロセス多重度をプロセス\n１１０の数としてプロセス生成装置１１に設定することにより，ブロッ\nクチェーンネットワーク５における演算処理能力にボトルネックを発生\nさせずに，リクエストの送信側においてボトルネックを発生させること\nができ，プロセス生成装置１１において不要なプロセス１１０を生成し\nないようにして，リクエスト制御システム１のリソースを効率的に用い\nることができる（【００４６】）。\n⑵  引用発明１について\n引用文献１には，別紙２「引用文献１の記載事項（抜粋）」のとおりの記\n載があり，この記載によると，引用発明として，本件審決が認定するとおり\nのものを認定することができ，この点は，当事者間にも争いがない。\n２  取消事由（本件補正発明の進歩性に関する判断の誤り）の有無について\n⑴  相違点３の容易想到性の有無について\nア  引用文献１の記載事項に関して\n引用文献１には，①課題として，「２.３  本研究の課題  ＢＣの実適用\nに向けては，ＢＣ基盤およびその実装における現時点での技術課題の明確\n化が必要である．特に，金融業務への適用に向けては，一般的にトランザ\nクションのスループットが性能面の最重要指標である．」（１６９頁左欄２\n９ないし３３行目）を掲げ，②課題抽出に向けての目的として，「目的２：\nＦａｂｒｉｃ／ＢＣ基盤の性能ボトルネック抽出方法の検討  性能限界や傾向\nを把握するためには，そのボトルネック箇所を特定することが重要であ\nる．」（１６９頁右欄９ないし３８行目）とし，③測定方法として，マルチ\nスレッドでトランザクションを並列実行して負荷をかけるものとし，その\n方法として，スレッドごとにトランザクションを指定した回数繰り返し，\n全スレッドのトランザクションが完了するまでの時間を測定することと\nし（１７１頁左欄３ないし２３行目），④トランザクションのスループット\nの計算方法を，「全スレッドによる合計リクエスト件数／（全レスポンスが\n返ってきた時刻－リクエスト処理を開始した時刻）」とし，１スレッドあた\nりのリクエスト数を１０００あるいは２００に固定し，並列スレッド数を\n変える等の条件で実験したところ（１７１頁左欄２４行ないし右欄７行目，\n１７１頁表３），⑤結果として，「並列スレッド数を増やしていくとスルー\nプットも増加する傾向にあった．ただし，ある程度並列度を増やすとスル\nープットは頭打ちとなった．また，スループットが頭打ちになった後も，\nそれ以上に並列度を増やしていくと，内部的にエラーが発生する等，安定\n稼働が困難となる場合が見受けられた．つまり，高負荷を与えた場合には，\n挙動が安定しなくなる場合があるため，フロント側でリクエストの流量制\n御を行う等の対策が必要となり得る．」（１７１頁右欄２７ないし３９行目，\n１７２頁図３，１７２頁図４）との知見が得られたとの記載がある。\nこれらの記載によると，引用文献１の実験においては，スレッド当たり\nのリクエスト数をセキュリティ機能のＯＦＦ又はＯＮの相違に従って固\n定し，並列スレッド数を変化させてスループット（１秒当たりのリクエス\nト処理量）を測定しているのであり，「全スレッドによる合計リクエスト件\n数」は並列スレッド数にのみ左右されるから，引用文献１は，専ら並列ス\nレッド数とスループットとの関係を測定したものであり，その測定結果と\nして，並列スレッド数の増加に対するスループットは，ある程度までは増\n加し，一定程度で頭打ちとなり，その後は挙動不安定になるというものが\n得られたとするものである。そうすると，引用文献１は，並列スレッド数\nを増加させていけばスループットは増加するが，ある程度以降は挙動が安\n定しなくなるので，その場合には並列スレッド数の増加による効果がなく\nなり，「リクエストの流量制限」で対応しなければならないと理解すべきも\nのであるから，その記載内容は，スレッド数の増加による効果には一定の\n最大限度があることを含意するものというべきである。\n以上のとおりであるから  原告の前記第３の１⑴アの主張は採用する\nことができない。なお，原告は，引用文献１においては，「負荷が大きすぎ\nること」，すなわち「単位時間当たりのリクエスト数が大きすぎること」を\n認識するための手段としてスレッドの数を増加させてみた測定結果が記\n載されているのにすぎず，このような記載をもって，「スレッド数（並列度）\nの制御」を，「リクエストの流量制御」における課題解決手段として読み取\nることはできないない旨主張するが，前述のとおり，引用文献１の該当部\n分の記載は，単に課題認識手段としての測定結果を表示したものとはいえ\nず，スレッドの数を増加させた場合の結果に応じて，課題解決に向けた対\n応策の示唆等にも及ぶものであるから，原告の前記主張は前提を欠くもの\nというべきである。\nしたがって，引用文献１には，引用発明がスレッド数を制御すること，\n少なくとも，スレッドの多重度を設定し，これより，設定されるスレッド\n多重度に応じた複数のスレッドを生成するものであるとの記載があると\n認められる。\nイ  スレッドとプロセスの置換について\n(ア)  相違点３は，「本件補正発明は，生成部が『設定されるプロセス多重\n度に応じた』複数のプロセスを生成するものであるのに対して，引用発\n明は，そのような特定がなされていない点」というものである。\n(イ)  引用文献２の記載事項は別紙３「引用文献２の記載事項（抜粋）」の\nとおりであり，引用文献３の記載事項は別紙４「引用文献３の記載事項\n（抜粋）」のとおりであり，甲４文献の記載事項は別紙５「甲４文献の記\n載事項（抜粋）」のとおりであり，これらの記載事項からすると，並列処\n理を実現するに当たり，マルチプロセス及びマルチスレッドはどちらも\n周知の技術であり，どちらを用いて並列処理を実現するかは，当業者が\n技術的要件等に基づき適宜設計的に決定し得た事項であることが認めら\nれる。\n(ウ)  ここで，本件補正発明についてみると，本件補正発明は「トランザ\nクションのリクエストを送信する複数のプロセスであって，設定される\nプロセス多重度に応じた複数のプロセスを生成する生成部」を備えると\nのみ特定され，「プロセス多重度」はプロセスの数である（本願明細書【０\n０３１】，【００３８】）。そして，「プロセス多重度」は単に「設定される」\nと特定されているだけであり，また，設定される「プロセス多重度」と\n生成されるプロセスとがどのような関係において対応するのかは何ら特\n定されていない。これに対し，本件補正後の請求項４に係る発明は，「当\n該プロセス多重度の増加に対する平均スループットの増加の割合が，プ\nロセス多重度が第１値のときに第１割合であり，当該第１値より大きい\n第２値以上であるときに前記第１割合より小さい第２割合であり，前記\n複数のプロセスの数は，前記第２値よりも小さい数で設定される」と，\n同請求項８に係る発明は，「当該プロセス多重度の増加に対する平均スル\nープットの増加の割合が，プロセス多重度が第１値のときに第１割合で\nあり，当該第１値より大きい第２値以上であるときに前記第１割合より\n小さい第２割合であり，前記複数のプロセスの数は，前記第２値よりも\n小さい数で設定される」とされており，これら発明との対比からして，\n本件補正発明は，これらプロセス数を所定の数に制限する特定がされて\nいないものと理解できる。したがって，本件補正発明は，プロセス数が\n制御されるものであればこれらを全て含むものと認められる。\n(エ)  前記アのとおり，引用発明の構成は，スレッドの多重度を設定し，\n設定されるスレッドの多重度に応じた複数のスレッドを生成するもので\nあるところ，前記(イ)のとおり，マルチスレッドとマルチプロセスのい\nずれの並列処理を実現するかは，当業者が技術的要件等に基づき適宜設\n計的に決定し得た事項であることからすれば，引用発明のスレッドの構\n成を適宜プロセスに代え，相違点３に係る，生成部が「設定されるプロ\nセスの多重度に応じた複数のプロセスを生成する」ものに置換すること\nは当業者にとって極めて容易なことであり，これにより引用発明は，前\n記(ウ)のとおり，本件補正発明に至ることとなる。\nウ  効果について\n発明の効果が予測できない顕著なものであるかについては，当該発明の\n特許要件判断の基準日当時，当該発明の構成が奏するものとして当業者が\n予測することのできなかったものか否か，当該構成から当業者が予測する\nことのできた範囲の効果を超える顕著なものであるか否かという観点か\nら検討する必要があるところ，前記イ(ウ)のとおりの構成とみるべき本件\n補正発明の効果は，その構成から当然に当業者が予想し得る範囲内のもの\nにすぎない。\nエ  原告の主張について\n前記第３の１⑴記載の原告の主張については，前記認定の中で適宜判断\n済みであるが，特に補足すべき点については以下のとおりである。\n(ア)  原告は，前記第３の１⑴イ(ア)のとおり，本願明細書の記載を併せ\n考慮すれば，「設定されるプロセス多重度に応じた複数のプロセスを生成\nする生成部」という本件補正発明の発明特定事項によって，プロセス多\n重度に応じてプロセス数を制限するとの構成が特定されている旨主張す\nる。\nしかしながら，前記イ(ウ)のとおり，特許請求の範囲の記載自体から，\nプロセス多重度に応じてプロセス数を制限するとの構成は読み取れない\nし，原告が主張する本願明細書の記載及びプロセス多重度に応じてプロ\nセス数を制限するとの発明特定事項は，本件補正発明とは異なる別の請\n求項に係るものであるというべきである。\nしたがって，原告の上記主張を採用することはできない。\n(イ)  原告は，前記第３の１⑴イ(イ)のとおり，①マルチプロセスではな\nい引用発明からはスレッド数を制限することが示唆されるだけであって，\nプロセス数を制限することまで示唆されることはない，②プロセスは１\n個のメモリ空間が割り当てられた実行プログラムであるのに対して，ス\nレッドはプロセス内に所在してＣＰＵコアに対する命令を実行する単位\nをいい，この両者はハードウェア資源の利用態様が相違するため，これ\nらを相互に置換することはできない旨主張する。\n上記①の主張についてみると，確かに，並列スレッド数増加によるス\nループット増加に頭打ちの効果があり，更なる増加はむしろ挙動を安定\nさせなくなることから，スレッド数を制限することが示唆されたとして\nも，マルチスレッドの構成をマルチプロセスの構成に置換する際に，プ\nロセス数を制限することまでもが直ちに動機付けられるとはいい難い。\nなぜならば，トランザクションのリクエストを送信する際に，マルチプ\nロセスにもマルチスレッドと同様の頭打ち効果や挙動不安定があるとの\n知見を前提としていなければ，スレッド数を制限するマルチスレッドの\n構成を，プロセスを制限するマルチプロセスの構成に置換する動機付け\nはないからである。この点，「かかるマルチプロセスを採用した場合に，\nプロセスの多重度を制限するため『プロセスの多重度に応じた』複数の\nプロセスを生成することは，リクエスト送信を割り当てるスレッドの数\nを制限するという上記示唆に基づいて，当業者であれば容易に想到し得\nる」とした本件審決の説示は当を得たものとはいい難い。\nしかしながら，前記(ア)のとおり，プロセス数を制限することは本件\n補正発明の発明特定事項には含まれず，「プロセス多重度」に対応するプ\nロセス数が設定されるものであればよいものと認められるから，引用発\n明のマルチスレッドの構成をマルチプロセスの構成に置換すれば本件補\n正発明に至るのであり，本件審決の判断は結論においては正当であり，\n原告の上記主張は，本件の結論を左右するものとはいえない。\n次に，上記②の主張についてみると，マルチスレッドとマルチプロセ\nスとがそれぞれハードウェア資源の利用態様が相違するとしても，マル\nチスレッド及びマルチプロセスが並列処理を行うための手法として周知\nであることから，格別な困難でもない限り，マルチスレッドとして構成\nされたものをマルチプロセスとして構成されたものに転用することは，\n当業者が適宜なし得る事項である。この転用の際，スレッドからプロセ\nスへ置換する場合に両立しない部分があれば，当業者は技術常識に従い\n所要の変更を加えることができるのであって，本件補正発明について，\nそれが困難であるとは認められない。\nしたがって，原告の上記主張を採用することはできない。\n(ウ)  そのほか原告がるる主張するところも前記アの認定判断を左右しな\nい。\n⑵  小括\n前記⑴の認定判断によると，相違点３は容易想到であるとした本件審決の\n判断は結論において相当であり，そうすると，本件補正発明は引用発明及び\n周知技術に基づいて当業者が容易に発明をすることができたものであるから，\n本件補正発明は独立特許要件を欠くものであり，本件補正は特許法１７条の\n２第６項で準用する同法１２６条７項の規定に違反するので，同法１５９条\n１項において読み替えて準用する同法５３条１項の規定により却下すべきも\nのであって，本件補正を却下した本件審決の判断に誤りがあるとはいえず，\nまた，本願発明についても，当業者が容易に発明をすることができたものと\nいうことになるから，本件出願を拒絶すべきとした本件審決の判断にも誤り\nはない。\n３  結論\nよって，取消事由は理由がないから，原告の請求を棄却することとして，主\n文のとおり判決する。\n知的財産高等裁判所第４部\n裁判長裁判官\n菅      野      雅      之\n裁判官\n本      吉      弘      行\n裁判官\n中      村              恭\n（別紙１）\n本願明細書の記載事項（抜粋）\n【発明の詳細な説明】\n【技術分野】\n【０００１】\n本発明は，トランザクションをブロックチェーンネットワークにリクエストする\nための技術に関する。\n【背景技術】\n【０００２】\nブロックチェーンを用いた分散型台帳技術が，ビットコイン等の暗号資産（仮想\n通貨）を管理する方法として用いられている。近年では，これらの技術は，このよ\nうな暗号資産だけではなく，様々な資産を管理したり移動したりする方法として用\nいることも検討されている・・・。\n【発明の概要】\n【発明が解決しようとする課題】\n【０００４】\n分散型台帳技術では，Ｐ２Ｐ（Ｐｅｅｒ  ｔｏ  Ｐｅｅｒ）によって接続された複数のノー\nドによってネットワークが形成され，そのネットワークにおける複数のノードによ\nって台帳が分散して記録される。分散型台帳技術においては，ほとんどの場合，ブ\nロックチェーンが台帳に記録され，台帳に直接記録されない場合でも何らかの形態\nで用いられる。以下の説明では，台帳を分散して記録する複数のノードによって形\n成されるネットワークであって，ブロックチェーンを扱うネットワークを，ブロッ\nクチェーンネットワークという。なお，本明細書でいうブロックチェーンネットワ\nークは，必ずしもビザンチン耐性を備えた構成であることを必須としないが，ビザ\nンチン耐性を備えた構成であってもよい。\n【０００５】\nブロックチェーンネットワークを構成する各ノードによれば，互いが保持するデ\nータの正当性を高めるために，所定のアルゴリズムによって合意形成が行われる。\nこれによって，データの改ざんが難しくなり，取引の信頼性が保たれる。一方，一\n般的には合意形成の処理には多くの時間を要すると考えられているため，大量のト\nランザクションが発生するような処理に適用することは難しいと考えられている。\n【０００６】\n本発明の目的の一つは，分散型台帳技術を用いた場合でも，多くのトランザクシ\nョンを効率よく処理することにある。\n【課題を解決するための手段】\n【０００７】\n本発明の一実施形態によれば，台帳を分散して記録する複数のノードの少なくと\nも１つに対し，トランザクションのリクエストを送信する複数のプロセスを生成す\nる生成部と，トランザクションの指示を受け付け，前記複数のプロセスのいずれか\nに当該トランザクションのリクエスト送信を割り当てる割当部と，を備えるシステ\nムが提供される。\n【０００８】\n前記複数のプロセスは，第１プロセスおよび第２プロセスを含み，前記第１プロ\nセスが前記リクエストを送信するノードは，前記第２プロセスが前記リクエストを\n送信するノードと同一であってもよい。\n【０００９】\n前記割当部は，ラウンドロビン方式により前記トランザクションのリクエスト送\n信を割り当ててもよい。\n【００１０】\n前記複数のノードで形成されるネットワークにおける所定のトランザクションの\nリクエストに対する平均スループットとプロセス多重度との関係において，プロセ\nス多重度の増加に対する平均スループットの増加の割合が，プロセス多重度が第１\n値のときに第１割合であり，当該第１値より大きい第２値以上であるときに前記第\n１割合より小さい第２割合であり，前記複数のプロセスの数は，前記第２値よりも\n小さい数で設定されてもよい。\n【００１２】\n本発明の一実施形態によれば，トランザクションの指示を受け付け，台帳を分散\nして記録する複数のノードの少なくとも１つに対し，トランザクションのリクエス\nトを送信する複数のプロセスのいずれかに，前記指示に基づくトランザクションの\nリクエスト送信を割り当てる，処理方法が提供される。\n【００１３】\n前記複数のプロセスは，第１プロセスおよび第２プロセスを含み，前記第１プロ\nセスが前記リクエストを送信するノードは，前記第２プロセスが前記リクエストを\n送信するノードと同一であってもよい。\n【００１４】\n前記トランザクションのリクエスト送信を割り当てるときには，ラウンドロビン\n方式を用いてもよい。\n【００１５】\n前記複数のノードで形成されるネットワークにおける所定のトランザクションの\nリクエストに対する平均スループットとプロセス多重度との関係において，プロセ\nス多重度の増加に対する平均スループットの増加の割合が，プロセス多重度が第１\n値のときに第１割合であり，当該第１値より大きい第２値以上であるときに前記第\n１割合より小さい第２割合であり，前記複数のプロセスの数は，前記第２値よりも\n小さい数で設定されてもよい。\n【００１６】\n前記複数のノードで形成されるネットワークは，コンソーシアム型であってもよ\nい。\n【発明の効果】\n【００１７】\n本発明の一実施形態によれば，分散型台帳技術を用いた場合でも，多くのトラン\nザクションを効率よく処理することができる。\n【図面の簡単な説明】\n【００１８】\n【図１】本発明の一実施形態におけるリクエスト制御システムの構成を示すブロッ\nク図である。\n【図２】本発明の一実施形態におけるリクエスト制御システムが実行する割当処理\nを示すフローチャートである。\n【図３】本発明の一実施形態におけるプロセスが実行する送信処理を示すフローチ\nャートである。\n【図４】本発明の一実施形態におけるリクエスト制御システムが事前設定をする場\n合の構成を示すブロック図である。\n【図５】本発明の一実施形態におけるリクエスト制御システムが実行する設定処理\nを示すフローチャートである。\n【図６】本発明の一実施形態におけるプロセス多重度と平均スループットとの関係\nを説明する図である。\n【発明を実施するための形態】\n【００１９】\n以下，本発明の一実施形態について，図面を参照しながら詳細に説明する。以下\nに示す実施形態は本発明の実施形態の一例であって，本発明はこの実施形態に限定\nして解釈されるものではない。すなわち，以下に説明する複数の実施形態に公知の\n技術を適用して変形をして，様々な態様で実施をすることが可能である。\n【００２０】\n＜実施形態＞\n［１．システムの概要］\n図１は，本発明の一実施形態におけるリクエスト制御システムの構成を示すブロ\nック図である。リクエスト制御システム１は，ユーザ端末８０からネットワークＮ\nＷを介して電文を受信し，その電文に対応したトランザクションのリクエストをブ\nロックチェーンネットワーク５に送信する。このリクエストは，ブロックチェーン\nネットワーク５における分散型台帳にそのトランザクションを記録させるための指\n示である。\n【００２１】\n一般的には，ブロックチェーンネットワーク５において分散型台帳への記録は，\n多くの時間を要する。したがって処理のボトルネックはブロックチェーンネットワ\nーク５における演算処理能力に存在すると考えられていた。ビザンチン耐性を備え\nる構成である場合には，より多くの時間を要するため，このような傾向が顕著に現\nれる。一方，ビザンチン耐性を備えていない構成であっても，ビザンチン耐性を備\nえる構成よりも処理時間を要しないものの，分散型台帳への記録という観点では，\n同様な傾向を有している。\n【００２２】\n発明者は，様々な検証により，ブロックチェーンネットワーク５における演算処\n理能力にボトルネックが存在する状況は，極めて多くの処理が集中した場合であっ\nて，実際には，その前の段階，すなわちトランザクションのリクエストを送信する\n側においてボトルネックが存在する場合が多いことの知見を得た。この知見に基づ\nき，本発明の一実施形態におけるリクエスト制御システム１では，ブロックチェー\nンネットワーク５における演算処理能力にボトルネックが存在する段階までリクエ\nストを送信するためのプロセスを多重化することで，処理量を向上させることがで\nきることがわかった。このようにして処理量を向上させるための構成および処理方\n法について，順に説明する。\n【００２３】\n［２．ユーザ端末］\nユーザ端末８０は，一般ユーザが利用するスマートフォン，パーソナルコンピュ\nータなどの端末である。この例では，ユーザ端末８０において金融機関が提供する\nアプリケーションプログラムが起動されると，ユーザの指示によって自身の口座か\nら他の口座への振込処理等の手続が可能になっている。ユーザによって手続の指示\nがされると，ユーザ端末８０は，その手続に応じたトランザクションの指示内容を\n含む電文を送信する。\n【００２４】\n［３．ブロックチェーンネットワーク］\nブロックチェーンネットワーク５は，Ｐ２Ｐ接続ＰＰによって複数のノードが接\n続されている。図１においては，４つのノード５１０－１，５１０－２，５１０－\n３，５１０－４によってブロックチェーンネットワーク５が構成されているが，ノ\nードの数は４つより少なくても多くてもよい。以下の説明において，それぞれのノ\nードを区別せずに説明する場合には，単にノード５１０という。\n【００２５】\nノード５１０－１は，コンピュータ５１－１と台帳５３－１とを含む。台帳５３\n－１は，各ノード５１０に分散される台帳のデータが記録される記録媒体である。\nコンピュータ５１－１では，分散型台帳技術を実現するためのプログラムがＣＰＵ\nによって実行される。コンピュータ５１－１は，台帳５３－１へのデータの記録処\n理および読み出し処理を実行し，また，他のノード５１０－２，５１０－３，５１\n０－４において台帳のデータを分散して記録するための処理を実行する。この処理\nには，分散したデータの正当性を高めるための合意形成処理も含まれる。ここでは，\nノード５１０－１を例として，その構成を説明したが，他のノード５１０－２，５\n１０－３，５１０－４においても，それぞれの構成は同様である。すなわち，いず\nれかのノード５１０に対してトランザクションのリクエストがされると，そのトラ\nンザクションの内容が各ノード５１０における台帳にも記録される。\n【００２６】\nブロックチェーンネットワーク５においては，上述のように台帳を分散して各ノ\nード５１０で記録する方式が用いられているが，その過程における具体的な処理は，\n仕様（基盤ソフトウェア：上述したＣＰＵによって実行されるプログラムに対応）\nによって様々であって，公知の処理が適用されればよい。したがって，ブロックチ\nェーンネットワーク５における各ノード５１０の処理の詳細は説明を省略する。こ\nの例では，ブロックチェーンネットワークは，管理主体が存在するコンソーシアム\n型（例えば，Ｑｕｏｒｕｍ，Ｈｙｐｅｒｌｅｄｇｅｒ  Ｆａｂｒｉｃ等）を想定しているが，管理主体が存\n在しないパブリック型（例えば，Ｅｔｈｅｒｅｕｍ等）であっても適用可能である。\n【００２７】\n［４．リクエスト制御システム］\nリクエスト制御システム１は，プロセス生成装置１１（生成部），負荷分散装置１\n５（割当部）および通信装置１８を含む。これらの装置は，いずれもＣＰＵによっ\nてプログラムを実行することによって，以下に説明する機能をそれぞれ実現してい\nる。これらの装置のうち，一部または全部は一体の装置として実現されてもよい。\n【００２８】\n［４－１．プロセス生成装置］\nプロセス生成装置１１は，複数（この例では，予め設定されたｎ個）のプロセス\n１１０－１，１１０－２，・・・，１１０－ｎを生成する。以下の説明において，そ\nれぞれのプロセスを区別せずに説明する場合には，単にプロセス１１０という。各\nプロセス１１０は，負荷分散装置１５からトランザクションのリクエスト送信を割\nり当てられると，そのトランザクションについてのリクエストをノード５１０－１\nに対して送信する。この例では，いずれのプロセス１１０においても，リクエスト\nの送信先は同一のノード（この例ではノード５１０－１）として決められている。\nなお，上述したように，ブロックチェーンネットワーク５において使用される仕様\nによって，リクエストの送信先として，複数のノード５１０が指定されてもよいし，\nプロセス１１０によって異なるノード５１０が指定されてもよいし，リクエスト毎\nに異なるノード５１０が指定されてもよい。\n【００２９】\nプロセス１１０は，リクエストの送信の結果，ブロックチェーンネットワーク５\nにおいてトランザクションが分散型台帳に記録されたことを検出すると，キューに\n入っている次に処理すべきトランザクションのリクエストを送信する。キューは，\n各プロセス１１０に割り当てられている。プロセス１１０は，分散型台帳に記録さ\nれたことを，ブロックチェーンネットワーク５からの通知により検出してもよいし，\nブロックチェーンネットワーク５にアクセスすることによって検出してもよい。\n【００３０】\n［４－２．通信装置］\n通信装置１８は，ネットワークＮＷを介してユーザ端末８０から電文を受信し，\nこの電文に含まれるトランザクションの指示内容を負荷分散装置１５へ送信する。\n【００３１】\n［４－３．負荷分散装置］\n負荷分散装置１５は，通信装置１８からトランザクションの指示内容を受信する\nと，複数のプロセス１１０のいずれかに，そのトランザクションのリクエスト送信\nを割り当てる。負荷分散装置１５は，割り当てたプロセス１１０のキューに，トラ\nンザクションの指示内容を登録する。上述したように，キューに登録されたトラン\nザクションは，そのキューに対応したプロセス１１０からブロックチェーンネット\nワーク５に対して，リクエストとして送信される。この例では，ｎ個のプロセス１\n１０が生成されているため，プロセス多重度はｎ個となる。ｎ個の具体的な値は，\n事前の設定処理によって予め設定される。設定処理については，後述する。\n【００３２】\n［４－４．システムの動作］\n続いて，リクエスト制御システム１の動作について説明する。リクエスト制御シ\nステム１の動作としては，主として，複数のプロセス１１０のいずれかにトランザ\nクションを割り当てるための割当処理，および割り当てられたトランザクションの\nリクエストを送信するための送信処理を含む。\n【００３３】\n［４－４－１．割当処理］\n図２は，本発明の一実施形態におけるリクエスト制御システムが実行する割当処\n理を示すフローチャートである。システムの管理者等によりリクエスト制御システ\nム１における処理を開始する指示が入力されると，以下に説明する割当処理が実行\nされる。プロセス生成装置１１は，予め設定された数のプロセス１１０を起動（生\n成）する（ステップＳ１０１）。通信装置１８による電文の受信を待機する（ステッ\nプＳ１０３；Ｎｏ）。通信装置１８により電文が受信される（ステップＳ１０３；Ｙ\nｅｓ）と，負荷分散装置１５は，電文に含まれるトランザクションの指示内容を受\nけ付ける（ステップＳ１０５）。負荷分散装置１５は，複数のプロセス１１０から割\nり当ての対象となるプロセス１１０を特定し（ステップＳ１０７），そのプロセス１\n１０にトランザクションのリクエストをする指示をする（ステップＳ１０９）。この\n指示は，例えば，トランザクションの内容等を含む指示信号によって実現される。\nここで，負荷分散装置１５は，例えば，ラウンドロビン方式により，複数のプロセ\nス１１０から割り当ての対象となるプロセス１１０を特定する。なお，この方式は\nラウンドロビン方式に限らず，別のアルゴリズムを用いた方式であってもよい。\n【００３４】\nシステムの管理者等によりリクエスト制御システム１の処理を終了する指示がな\nければ（ステップＳ１１１；Ｎｏ），再びステップＳ１０３に戻って処理を続け\nる。一方，この処理を終了する指示があれば（ステップＳ１１１；Ｙｅｓ），プロ\nセス生成装置１１がプロセス１１０を終了させ（ステップＳ１１３），割当処理が\n終了される。\n【００３５】\n［４－４－２．送信処理］\n図３は，本発明の一実施形態におけるプロセスが実行する送信処理を示すフロー\nチャートである。プロセス生成装置１１によりプロセス１１０が起動されると，そ\nれぞれのプロセス１１０において，図３に示す送信処理が実行される。まず，プロ\nセス１１０は，プロセス生成装置１１によるプロセス終了の指示，または負荷分散\n装置１５からトランザクションのリクエストを送信する指示を待機する（ステップ\nＳ２０１；Ｎｏ，ステップＳ２０３；Ｎｏ）。プロセス終了の指示があった場合（ス\nテップＳ２０１；Ｙｅｓ）には，送信処理が終了される。\n【００３６】\n一方，リクエストを送信する指示を受信した場合（ステップＳ２０３；Ｙｅｓ），\nプロセス１１０は，送信するリクエストに電子署名の付加等の認証処理を行い（ス\nテップＳ２１１），認証処理が施されたリクエストをブロックチェーンネットワー\nク５に送信する（ステップＳ２１３）。その後，プロセス１１０は，リクエストの送\n信の結果，ブロックチェーンネットワーク５においてトランザクションが分散型台\n帳に記録されたことを検出することによって，処理の完了を確認するまで待機し（ス\nテップＳ２１５；Ｎｏ），処理の完了を確認すると（ステップＳ２１５；Ｙｅｓ），\nステップＳ２０１に戻って処理を続ける。\n【００３７】\n以上のように，リクエスト制御システム１が動作することによって，プロセス１\n１０の数に対応したリクエスト処理の多重化が実現される。後述のようにプロセス\n１１０の数が設定されているため，ブロックチェーンネットワーク５における演算\n処理能力がボトルネックになる前にリクエストの送信が制限され，効率的な分散型\n台帳の運用が可能となる。仮に，不安定要因により，ブロックチェーンネットワー\nク５における演算処理能力がボトルネックになる状態に移行したとしても，大きな\n影響を生じないようにすることもできる。\n【００３８】\n［５．設定処理］  続いて，プロセス生成装置１１において生成されるプロセス１\n１０の数（プロセス多重度）を設定する処理について説明する。\n【００３９】\n図４は，本発明の一実施形態におけるリクエスト制御システムが事前設定をする\n場合の構成を示すブロック図である。設定処理を行う場合におけるリクエスト制御\nシステム１Ａとしては，リクエスト制御システム１に対して，プロセス生成装置１\n１Ａ，指示生成装置３８および設定装置３９を含み，通信装置１８を含まない構成\nが例示される。ここでは，プロセス生成装置１１Ａ，指示生成装置３８および設定\n装置３９について説明し，他の構成については，その説明を省略する。\n【００４０】\nプロセス生成装置１１Ａは，設定装置３９から指定された数のプロセス１１０を\n起動するとともに，各プロセス１１０においてトランザクションのリクエストを送\n信してから，ブロックチェーンネットワーク５においてトランザクションが分散型\n台帳に記録されたことを検出するまでの時間（以下，スループットという）を測定\nする。この測定したスループットを設定装置３９に送信する。\n【００４１】\n指示生成装置３８は，設定装置３９からの制御に基づいて，所定のトランザクシ\nョンの指示を生成して，指示の内容を負荷分散装置１５に送信する。この指示の内\n容は，通信装置１８を介して受信する電文に基づくトランザクションの指示内容の\n代わりとなるものである。\n【００４２】\n設定装置３９は，プロセス生成装置１１Ａおよび指示生成装置３８を制御して，\nプロセス多重度（プロセス１１０の数：ｍ個）を変更しつつ，１プロセス当たりの\n平均スループットを測定する。これによって，設定装置３９は，プロセス多重度と\n平均スループットとの関係を取得する。設定装置３９は，この関係を用いて，利用\nするブロックチェーンネットワーク５における最適なプロセス１１０の数を算出す\nる。この数は，上述したｎ個に相当するものとして，リクエスト制御システム１に\nおけるプロセス生成装置１１に設定される。\n【００４３】\n図５は，本発明の一実施形態におけるリクエスト制御システムが実行する設定処\n理を示すフローチャートである。最初にブロックチェーンネットワーク５に接続す\nる場合，ブロックチェーンネットワーク５における設定の変更（ソフトウェアのバ\nージョンアップ等）があった場合等において，管理者等の指示により設定処理が実\n行される。まず，リクエスト制御システム１Ａは，設定装置３９の制御により，プ\nロセス多重度を変化させながら（例えば徐々に増加させながら），平均スループット\nを測定する（ステップＳ５０１）。\n【００４４】\n図６は，本発明の一実施形態におけるプロセス多重度と平均スループットとの関\n係を説明する図である。プロセス多重度および平均スループットの絶対値について\nは様々であるものの，多くのブロックチェーンネットワーク５において，このよう\nな結果が得られることは，発明者による検証から得られた知見である。すなわち，\nプロセス多重度が低い場合，プロセス多重度の増加に伴い平均スループットは増加\nしていく。一方，プロセス多重度が大きくなると，プロセス多重度が増加しても，\n平均スループットは増加しなくなっていく。すなわち，プロセス多重度が大きい値\nＮ２である場合の平均スループットの増加の割合は，プロセス多重度が小さい値Ｎ\n１（第１値）である場合の平均スループットの増加の割合（第１割合）よりも小さ\nい。特定のプロセス多重度における平均スループットの増加の割合は，図６に示す\nグラフにおいて，そのプロセス多重度における傾き（微分値）に相当する。この増\n加の割合を，以下，増加率という。プロセス多重度の増加に対して，増加率が大き\nく減少し始めるとき（第２割合）のプロセス多重度が，図６に示す閾値Ｔｈｎ（第\n２値）に対応する。\n【００４５】\nこのように，閾値Ｔｈｎよりもプロセス多重度が小さい領域Ａ１においては，ブ\nロックチェーンネットワーク５における演算処理能力にボトルネックがあるのでは\nなく，リクエストを送信する側の処理にボトルネックがある。一方，閾値Ｔｈｎよ\nりもプロセス多重度が大きい量器Ａ２においては，プロセス多重度を増加させても，\n平均スループットがほとんど増加しないことから，ブロックチェーンネットワーク\n５における演算処理能力にボトルネックがあることがわかる。\n【００４６】\n図５に戻って説明をつづける。リクエスト制御システム１Ａ（設定装置３９）は，\nプロセス多重度に対する平均スループットを測定した後に，各プロセス多重度にお\nける平均スループットの増加率を算出する（ステップＳ５０３）。この増加率は，図\n６に示すグラフにおいて，各プロセス多重度における傾きに相当する。そして，さ\nらに，増加率の変化に基づく所定の演算式によって，閾値Ｔｈｎが特定される（ス\nテップＳ５０５）。設定装置３９は，この閾値Ｔｈｎよりも小さいプロセス多重度を\nプロセス１１０の数としてプロセス生成装置１１に設定する。このようにプロセス\n１１０の数を設定することにより，ブロックチェーンネットワーク５における演算\n処理能力にボトルネックを発生させずに，リクエストの送信側においてボトルネッ\nクを発生させることできる。したがって，プロセス生成装置１１において不要なプ\nロセス１１０を生成しないようにして，リクエスト制御システム１のリソースを効\n率的に用いることができる。\n【符号の説明】\n【００４７】\n１，１Ａ…リクエスト制御システム，５…ブロックチェーンネットワーク，１１，\n１１Ａ…プロセス生成装置，１５…負荷分散装置，１８…通信装置，３８…指示生\n成装置，３９…設定装置，５１…コンピュータ，５３…台帳，８０…ユーザ端末，\n１１０…プロセス，５１０…ノード\n【図１】\n【図２】\n【図３】\n【図４】\n【図５】\n【図６】\n（別紙２）\n引用文献１の記載事項（抜粋）\n［１６７頁左欄１行ないし右欄５行目］\n１.はじめに\nブロックチェーン（Ｂｌｏｃｋｃｈａｉｎ，ＢＣ）技術は，破壊的イノベーションとして金融\nやＩｎｔｅｒｎｅｔ  ｏｆ  Ｔｈｉｎｇｓ（ＩｏＴ）等の非常に幅広い分野への応用が期待され，注目を\n集めている．例えば，金融分野では，従来は第三者機関を経由して実施されてきた\n取引を，ＢＣ技術を用いて利用者間（Ｐ２Ｐ）の直接取引で代替することで，取引コ\nストの削減ができると期待されている．文献［１］では，様々な分野にＢＣ技術を応用\nすることで，将来的に日本国内の６７兆円もの市場が影響を受ける可能性があると\nいう試算結果が示されている．\nＢＣ技術に大きな期待が集まっている一方で，現状ではセキュリティ面やシステ\nム性能面をはじめ，エンタープライズでの実適用には課題が多いといわれている．\nそのため，ＢＣの実適用に向けては，ＢＣ基盤やそのオープンソースソフトウェア\n（Ｏｐｅｎ  Ｓｏｕｒｃｅ  Ｓｏｆｔｗａｒｅ，  ＯＳＳ）実装における現時点での技術課題の明確化が\n必要である．\nそこで本研究では，ＢＣ基盤のＯＳＳプロジェクトであるＨｙｐｅｒｌｅｄｇｅｒ［８］の基\n盤実装の一つであるＦａｂｒｉｃ［１１］について性能を中心とした評価を行い，ＢＣ基盤お\nよびＦａｂｒｉｃの現時点での実力を明らかにするとともに，技術的な課題を抽出にする\nことを目的とする．\n［１６８頁右欄５ないし２６行目］\n２．２  ＢＣ基盤 Ｈｙｐｅｒｌｅｄｇｅｒ  Ｆａｂｒｉｃ\nＨｙｐｅｒｌｅｄｇｅｒプロジェクトは，Ｌｉｎｕｘ  Ｆｏｕｎｄａｔｉｏｎが設立したエンタープライズ\nで利用可能なＯＳＳのＢＣ基盤の開発を目的としたプロジェクトである［８］．同プ\nロジェクトは，２０１６年２月に設立され，金融機関をはじめとしたユーザ企業や\nＩＴベンダー等，計１００社以上が参画している．弊社も，同プロジェクトの設立\n時からプレミアメンバーとして参画し，コミュニティ活動に参加している．\nＨｙｐｅｒｌｅｄｇｅｒプロジェクトでは，ＢＣのユースケース，基盤の機能要件およびア\nーキテクチャがホワイトペーパーにまとめられている［９］．また，その実現に向け\nて，複数のベンダーから基盤実装が提案されている．ＩＢＭ社とＤＡＨ（Ｄｉｇｉｔａｌ  Ａ\nｓｓｅｔ  Ｈｏｌｄｉｎｇｓ）社の共同提案であるＦａｂｒｉｃ［１１］はその基盤実装の一つである．Ｆａ\nｂｒｉｃは２０１６年４月に公開され，２０１７年１月現在で開発者プレビュー版ｖ０．\n６までリリースされている．Ｆａｂｒｉｃは前述のホワイトペーパーに対応したアーキテ\nクチャを実装している．\nＦａｂｒｉｃは，様々な分野でのユースケースに対応可能とするために汎用性の高いＢ\nＣ基盤機能を提供する．また，現在は，コンソーシアムあるいはプライベート型で\nの利用を想定したＢＣ基盤となっている．Ｆａｂｒｉｃの主な機能的特徴として，具体的\nには以下が挙げられる．\n［１６８頁右欄３６行ないし１６９頁左欄４行目］\n図１は，公式ドキュメントに示されるＦａｂｒｉｃのアーキテクチャである．公式ドキ\nュメントの記載内容に従って，Ｆａｂｒｉｃの主要な構成要素を説明する。\n・メンバーシップサービス：ＢＣネットワークへの参加者，スマートコントラクト，\n合意形成を行う検証ノード等，ネットワーク上の全オブジェクトのＩＤを管理す\nる．\n・ＢＣサービス：Ｐ２Ｐプロトコル，分散台帳，コンセンサスマネージャといった\n要素によって構成される．Ｐ２Ｐプロトコルにより，Ｐ２Ｐでの双方向ストリー\nミング，フロー制御，リクエストの多重化といった機能を提供する。既存ネット\nワークと連携して動作する。分散台帳により，ＢＣと，台帳の（最新）状態を管\n理する。コンセンサスマネージャにより，プラグイン可能な合意形成アルゴリズ\nム用のインタフェースを提供する。\n・チェーンコードサービス：スマートコントラクトを実行する軽量でセキュアな実\n行環境を提供する。\n［１６９頁左欄２９ないし３３行目］\n２.３  本研究の課題\nＢＣの実適用に向けては，ＢＣ基盤およびその実装における現時点での技術課題\nの明確化が必要である．特に，金融業務への適用に向けては，一般的にトランザク\nションのスループットが性能面の最重要指標である．\n［１６９頁右欄９ないし３８行目］\n３.  Ｈｙｐｅｒｌｅｄｇｅｒ  Ｆａｂｒｉｃの評価\n３.１  評価の目的\nＦａｂｒｉｃおよびＢＣ基盤の課題抽出に向けて，以下を主な目的として評価を行う．\n目的１：Ｆａｂｒｉｃの現実装における実力（主に性能）の把握\nＦａｂｒｉｃは公開されて間もないため，その品質（特に非機能面）が未知数であった．\nそのため，実機上に環境を構築して動作検証を行い，さらには性能を測定すること\nで，Ｆａｂｒｉｃの現実装における実力を把握する必要がある．性能評価においては，よ\nり本格的なＢＣネットワークを構築することが望ましい．\n目的２：Ｆａｂｒｉｃ／ＢＣ基盤の性能ボトルネック抽出方法の検討\n性能限界や傾向を把握するためには，そのボトルネック箇所を特定することが重\n要である．しかし，Ｆａｂｒｉｃでは，そのような調査や分析を行う手段が整備されてい\nない．そのため，性能ボトルネックの抽出方法の検討が必要である．Ｆａｂｒｉｃ自体の\nバージョンアップ時等には，再度性能評価を行うことが予想されるため，ボトルネ\nック抽出は繰り返し実行できるようにシステム化することが望ましい．\n３.２  評価方法\n３.２.１  概要\n先に示した評価の目的１と２を達成するために，以下の評価方針を採用した．\n目的１の達成に向けた方針\n性能評価に適した本格的な評価環境として，マルチホスト上にまたがった環境上\nにＦａｂｒｉｃによるＢＣネットワークを構築し，その上で性能測定を行う．\n目的２の達成に向けた方針\nＦａｂｒｉｃ（およびＢＣ基盤）の性能ボトルネックを容易に抽出可能とするためのモ\nニタリング環境も合わせて整備する．\n［１７１頁左欄３ないし２３行目］\n３.２.３  測定方法\nクライアントからＲＥＳＴ経由でＢＣネットワークにアクセスし，チェーンコー\nドを実行して負荷をかけることで性能測定を行った．チェーンコードには，Ｆａｂｒｉｃ\nの公式プロジェクトに付属のサンプルチェーンコード「ｍａｐ」を利用する．本サ\nンプルチェーンコードは簡易キーバリューストアとして動作する．なお，負荷をか\nける際には，複数のクライアントからの同時アクセスを模擬するため，マルチスレ\nッドでトランザクションを並列実行した．\nクライアントによる負荷生成ツールプログラムの処理の流れは以下のとおりであ\nる．\n１.  ユーザログイン（セキュリティ機能ＯＮ時のみ）\n２.  ｍａｐチェーンコードをＢＣ上にデプロイ\n３.  スレッド毎に実行トランザクション（ｉｎｖｏｋｅ）を指定した回数繰り返す（並\n列実行）\n４.  全スレッドの実行トランザクションが完了するまで（レスポンスがかえって\nくるまで）待つ\n５.  スレッド毎に参照トランザクション（ｑｕｅｒｙ）を指定した回数繰り返す（並\n列実行）\n６.  全スレッドの参照トランザクションが完了するまで（レスポンスがかえって\nくるまで）待つ\n［１７１頁左欄２４行ないし右欄７行目］\nここで，今回の測定におけるトランザクションのスループット計算方法は以下の\nとおりである.\nスループット(tx/s)\n全スレッドによる合計リクエスト件数\n＝  ――――――――――――――――――――――――――――\n全レスポンスが返ってきた時刻－リクエスト処理を開始した時刻\n３.２.４  実験パラメータ\n今回の測定で利用した実験パラメータ表３のとおりである．これらは性能に与え\nる影響が特に大きいと想定したパラメータである．セキュリティ機能ＯＦＦとＯＮ\n時のそれぞれの場合で測定した。ＯＮ時には，メンバーシップサービスを利用して，\nネットワークへの参加ノードの認証やトランザクションの秘匿化が行われる.一方，\nＯＦＦ時にはメンバーシップサービスは利用されず，認証や秘匿化は行われない．\n［１７１頁右欄２７ないし３９行目］\n３.３  結果と考察\n図３にセキュリティ機能ＯＦＦ時の，図４にセキュリティ機能ＯＮ時のｉｎｖｏｋｅ\n／ｑｕｅｒｙスループット測定結果を示す．図に示す通り，セキュリティ機能ＯＦＦ／\nＯＮ時ともに，ｉｎｖｏｋｅとｑｕｅｒｙの両方で，並列スレッド数を増やしていくとスルー\nプットも増加する傾向にあった．ただし，ある程度並列度を増やすとスループット\nは頭打ちとなった．\nまた，スループットが頭打ちになった後も，それ以上に並列度を増やしていくと，\n内部的にエラーが発生する等，安定稼働が困難となる場合が見受けられた．つまり，\n高負荷を与えた場合には，挙動が安定しなくなる場合があるため，フロント側でリ\nクエストの流量制御を行う等の対策が必要となり得る．\n［１７０頁図２］\n［１７１頁表３］\n表３  実験パラメータ\nＴａｂｌｅ３  Ｐａｒａｍｅｔｅｒｓ  ｏｆ  ｅｘｐｅｒｉｍｅｎｔｓ\nパラメータ  設定値のパターン\nセキュリティ機能  ＯＦＦ，ＯＮ\n合意形成アルゴリズム  Ｂａｔｃｈ  ＰＢＦＴ（バッチサイズ＝２）\nクライアントのスレッド数  １，２，４，６，８，１０，１２，･･･\nスレッドあたりの\nリクエスト数\n１０００（セキュリティ機能ＯＦＦ）\n２００（セキュリティ機能ＯＮ）\n［１７２頁図３］及び［１７２頁図４］\n（別紙３）\n引用文献２の記載事項（抜粋）\n【０００８】\nプロセッサー１１は，画像形成装置１０の動作に必要な演算及び制御などの処理\nを行うコンピューターの中枢部分に相当する。プロセッサー１１は，ＲＯＭ１２又\nは補助記憶デバイス１４などに記憶されたシステムソフトウェア，アプリケーショ\nンソフトウェア又はファームウェアなどのプログラムに基づいて，画像形成装置１\n０の各種の機能を実現するべく各部を制御する。プロセッサー１１は，例えば，Ｃ\nＰＵ（ｃｅｎｔｒａｌ  ｐｒｏｃｅｓｓｉｎｇ  ｕｎｉｔ），ＭＰＵ（ｍｉｃｒｏ  ｐｒｏｃｅｓｓｉｎｇ  ｕｎｉｔ），ＳｏＣ（ｓ\nｙｓｔｅｍ  ｏｎ  ａ  ｃｈｉｐ），ＤＳＰ（ｄｉｇｉｔａｌ  ｓｉｇｎａｌ  ｐｒｏｃｅｓｓｏｒ）又はＧＰＵ（ｇｒａｐｈｉｃｓ\nｐｒｏｃｅｓｓｉｎｇ  ｕｎｉｔ）などである。あるいは，プロセッサー１１は，これらの組み合わ\nせである。プロセッサー１１は，好ましくは，マルチコアＣＰＵ，又はＧＰＵとＣ\nＰＵとを備えるプロセッサーである。複数のコアを備えるプロセッサーは，マルチ\nスレッド又はマルチプロセスなどの並行処理を並列処理することで高速に処理する\nことが可能なためである。なお，並行処理とは，複数のスレッド又はプロセスなど\nを，時分割などによって切り替えながら同時的に処理すること，あるいは並列処理\nすることなどである。また，並列処理とは，複数のスレッド又はプロセスなどを，\n複数のコアで同時に処理することなどである。\n【００６７】\nプロセッサー１１は，上記の実施形態においてマルチスレッドで行っている処理\nをマルチプロセスで行っても良い。\n（別紙４）\n引用文献３の記載事項（抜粋）\n【００４５】\n並列処理の手法としては，マルチスレッドやマルチプロセスを用い，又はプログ\nラム内での繰返し処理によって行うことができる。図９は，経路多重度３の場合の\n疎通確認をマルチスレッドで行う一例を示している。このスレッドは，経路多重度\n数だけ起動され，第１の多重経路のスレッドと第２の多重経路のスレッドと第３の\n多重経路のスレッドとで，それぞれ異なる疎通経路について同時に疎通確認を行う。\n（別紙５）\n甲４文献の記載事項（抜粋）\n【０００２】\n情報処理装置（コンピュータ）は，例えば，コンピュータプログラム（略してプ\nログラムとも記す）を実行する際に，プログラムを実行する単位である複数のプロ\nセスを生成する。さらに，このような場合には，情報処理装置は，プロセス内に，\n処理を実行する単位である複数のスレッドを生成する。\n【００１８】\n＜第１実施形態＞\n図１は，本発明に係る第１実施形態の情報処理装置の構成を簡略化して表すブロ\nック図である。第１実施形態の情報処理装置１０１は，例えばＣＰＵ（Ｃｅｎｔｒａｌ  Ｐ\nｒｏｃｅｓｓｉｎｇ  Ｕｎｉｔ）１０２を備えたコンピュータである。ＣＰＵ１０２は，記憶装置\n（図示せず）に格納されているコンピュータプログラム（プログラム）を読み出し\n当該プログラムを実行することによって，情報処理装置１０１の全体的な動作を制\n御する。\n【００１９】\nこの第１実施形態では，情報処理装置１０１（ＣＰＵ１０２）は，プログラムを\n実行する単位である複数のプロセスを生成する。プロセスは，ＣＰＵ１０２の機能\n部の一つであり，当該プロセスの動作（処理）を管理する機能を備えている。例え\nば，プロセス（ＣＰＵ１０２）は，当該プロセスが受けたリクエストに応じた処理\nを実行する単位であるスレッドを生成（設定）する。プロセスは，通常，複数の処\n理を実行することから，複数のスレッドを生成可能となっている。当該プロセスが\n持つことができるスレッドの上限数は予め設定されている。\n【００６４】\n図３は，第４実施形態の情報処理装置の構成を簡略化して表すブロック図である。\nこの第４実施形態の情報処理装置は，サーバ装置（コンピュータ）１０であり，情\n報通信網（ネットワーク）７０を介して複数のクライアント端末３０に接続されて\nいる。また，サーバ装置１０はデータベース６０に接続されている。\n【００６５】\nクライアント端末３０は，利用者が情報を入力するためのキーボード等の入力手\n段と，各種の情報を表示するためのディスプレイ等の出力手段とを備える。ここで，\nクライアント端末３０としては，例えば，パーソナルコンピュータ（パソコン），タ\nブレット型端末またはＰＤＡ（Ｐｅｒｓｏｎａｌ  Ｄｉｇｉｔａｌ  Ａｓｓｉｓｔａｎｔ）端末が考えられるが，\nこれらに限定されない。\n【００６６】\nサーバ装置１０は通信部４０を備えており，当該通信部４０によって，サーバ装\n置１０は，クライアント端末３０とデータの送受信を行う。\n【００６７】\nサーバ装置１０は，さらに，例えばＣＰＵを有し，当該ＣＰＵにより実現される\n機能部として，プロセス１１と，障害対策部１００とを備えている。さらに，サー\nバ装置１０は，記憶媒体であるメモリ５０を備えている。\n【００６８】\nプロセス１１は，コンピュータプログラム（プログラム）の実行単位であり，プ\nログラムを実行する際に生成される。この生成されるプロセス１１には，メモリ５\n０内に，専用の記憶領域が割り当てられる。なお，サーバ装置１０には，通常，複\n数のプロセス１１が生成されるが，ここでは，図示の簡略化のために，一つのプロ\nセス１１のみ表すこととする。\n【００６９】\nプロセス１１は，管理部１３を備えている。この管理部１３は，プロセス１１の\n動作を管理する機能を備えている。例えば，管理部１３は，プロセス起動時に，予\nめ初期値として定められた複数の待機状態のスレッド１２を生成する。また，管理\n部１３は，各スレッド１２に，各スレッド１２を識別するスレッド識別情報を付与\nする。さらに，管理部１３は，プロセス１１に対して割り当てられたメモリ５０内\nの記憶領域から，それら生成した各スレッド１２に，予め定められた容量を持つ記\n憶領域を割り当てる。\n【００７２】\n通信部４０は，クライアント端末３０から受け取ったリクエストを，複数のプロ\nセス１１のうちの何れのプロセスに渡すかを判断する機能を備えている。リクエス\nトとは，例えば，データベース６０内のデータを検索する要求や，データを更新す\nる要求である。\n【図３】\n（別紙６）\n参考図１\n（別紙７）\n参考図２\n"
}