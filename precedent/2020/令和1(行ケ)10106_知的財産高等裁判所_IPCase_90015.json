{
  "trial_type": "IPCase",
  "date": {
    "era": "Reiwa",
    "year": 3,
    "month": 2,
    "day": 4
  },
  "case_number": "令和1(行ケ)10106",
  "case_name": "審決取消請求事件",
  "court_name": "知的財産高等裁判所",
  "right_type": "特許権",
  "lawsuit_type": "行政訴訟",
  "lawsuit_id": "90015",
  "detail_page_link": "https://www.courts.go.jp/app/hanrei_jp/detail7?id=90015",
  "full_pdf_link": "https://www.courts.go.jp/app/files/hanrei_jp/015/090015_hanrei.pdf",
  "contents": "令和３年２月４日判決言渡\n令和元年（行ケ）第１０１０６号  審決取消請求事件\n口頭弁論終結日  令和２年１１月２５日\n判                  決\n原              告        ソフトバンクロボティクス株式会社\n同訴訟代理人弁護士        鮫島正 洋\n和田祐 造\n森下   梓\n被              告        株式会社パッセルインテグレーション\n同訴訟代理人弁護士        中村隆 夫\n加藤伸 樹\n我妻崇 明\n主                  文\n１  原告の請求を棄却する。\n２  訴訟費用は原告の負担とする。\n事実及び理 由\n第１  請求\n特許庁が無効２０１８－８００１０４事件について令和元年６月２５日に\nした審決を取り消す。\n第２  事案の概要\n１  特許庁における手続の経緯等\n(1)  被告は，平成１６年８月１３日，発明の名称を「情報管理方法，情報管理\nプログラム，及び情報管理装置」とする発明について特許出願（特願２００\n４－２３５７６８号〔以下「本件特許出願」という。〕，優先日・平成１６\n年７月２８日。甲１８）をし，平成１７年１２月２２日，特許権の設定登録\n（特許第３７５４４３８号。請求項の数１５。）を受けた（以下，この特許\nを「本件特許」という。甲２９）。\n(2)  原告は，平成３０年８月２０日，本件特許の請求項１及び１４について特\n許無効審判を請求した（甲２９）。\n特許庁は，上記請求を無効２０１８－８００１０４号事件として審理を行\nい，令和元年６月２５日，「本件審判の請求は，成り立たない。」，との審\n決（以下「本件審決」という。）をし，その謄本は，同年７月４日，原告に\n送達された。\n⑶  原告は，令和元年８月１日，本件審決の取消しを求める本件訴訟を提起し\nた。\n２  特許請求の範囲の記載\n請求項１項及び１４項の特許請求の範囲の記載は，次のとおりである（甲１\n８）。なお，請求項１は，「Ａ」ないし「Ｈ」なる記号により分説されている\nわけではないが，本件審決において便宜のためこれらの記号が付されたもので\nある。\n【特許請求の範囲】\n【請求項１】\nＡ  コンピュータが情報を管理する情報管理方法であって，\nＢ  前記コンピュータに複数のノードそれぞれに対応付けて入力された管理す\nべき情報を，前記ノードを識別するノード識別情報に対応付けられた複数の\nノードデータを含む文書ファイルとして前記コンピュータが記憶する情報記\n憶ステップと，\nＣ  前記情報記憶ステップで記憶された前記文書ファイルの情報を前記コンピ\nュータが表示する情報表示ステップと，\nＤ  前記ノードデータに含まれるスクリプトを前記コンピュータが実行する情\n報評価ステップとを備え，\nＥ  前記ノードデータは，ルートノードを除いて，当該ノードの親ノードを特\n定する親ノード識別情報を含んでおり，\nＦ  前記スクリプトは，当該ノードデータに含まれる変数データである自ノー\nド変数データと，当該ノードの直系上位ノードのノードデータに含まれる変\n数データである上位ノード変数データを利用した演算を行って，前記自ノー\nド変数データの値を求める代入用スクリプトを含んでおり，\nＧ  前記情報表示ステップは，前記親ノード識別情報を利用して，前記ノード\nの木構造を表示する木構造表示ステップと，前記表示された木構造のノード\nのうちの選択されたノードの前記自ノード変数データ，前記上位ノード変数\nデータ及び前記スクリプトを表示するノードデータテーブル表示ステップを\n含み，\nＨ  前記情報評価ステップは，前記代入用スクリプトの実行により，前記自ノ\nード変数データの値を更新するステップを含む情報管理方法。\n【請求項１４】\n請求項１ないし１３のいずれか１項記載の情報管理方法における各ステッ\nプを，コンピュータに実行させるための情報管理プログラム。\n３  本件審決の理由の要旨\n(1)  本件審決の理由の要旨は，①本件特許の請求項１に係る発明（以下「本件\n発明１」という。）及び本件特許の請求項１４に係る発明（以下「本件発明\n１４」という。）は，本件特許出願の優先日前に頒布された刊行物である甲\n第１号証（特開平６－１７５８５２号公報。以下，単に「甲１」という。そ\nの他の刊行物についても同様に単に「甲２」等という。）に記載された発明\nではないから，原告主張の新規性欠如（特許法２９条１項３号）の無効理由\nは理由がない，②本件発明１及び本件発明１４は，甲１に記載された発明に\nおいて，相違点に係る構成を想起することは，当業者が容易になし得たもの\nでないから，原告主張の進歩性欠如（同条２項違反）の無効理由は理由がな\nい，③本件発明１及び本件発明１４に係る本件明細書（甲１８）の発明の詳\n細な説明は，当業者に実施可能なように記載されており，同法３６条４項１\n号に規定する要件（以下「実施可能要件」という。）に適合するから，原告\n主張の実施可能要件違反の無効理由は理由がない，④本件発明１及び本件発\n明１４は，本件明細書の発明の詳細な説明に記載されたものであり，発明の\n詳細な説明の記載により当業者が当該発明の課題を解決できる範囲のもので，\n同条６項１号に規定する要件（以下「サポート要件」という。）に適合する\nから，原告主張のサポート要件違反の無効理由は理由がないというものであ\nる。\n(2)  本件審決が認定した甲１に記載された発明（以下「甲１発明」という。），\n並びに本件発明１と甲１発明の一致点及び相違点は，次のとおりである。\nア  甲１発明\n甲１－ａ  コンピュータが知識ベースを構築する知識ベース構築方法で\nあって，\n甲１－ｂ  前記コンピュータに複数のノードそれぞれに対応付けて入力\nされた知識を，前記ノードを定義するノード名称に対応付けら\nれた複数のノードデータを含むデータベースに前記コンピュー\nタが記憶し，更に前記知識を知識記述言語に変換して知識ベー\nスとして記述する記憶ステップと，\n甲１－ｃ  前記記憶ステップで記憶された知識を前記コンピュータが表\n示する表示ステップと，\n甲１－ｄ  前記ノードデータに含まれる属性値の数式の計算を前記コン\nピュータが実行する実行ステップとを備え，\n甲１－ｅ  前記ノードデータは，最上位のノードを除いて，当該ノード\nの親ノードを特定する親ノードの名称を含み，前記ノードデー\nタには前記数式のほか条件分岐も含み得，\n甲１－ｆ  前記数式は，当該ノードの親ノードのノードデータに含まれ\nる属性値である親ノード属性値（『内箱の本体の高さ』）を当\n該ノードデータに含まれる属性値である自ノード属性値（『高\nさ』）として代入する数式を含んでおり，\n甲１－ｇ  前記表示ステップは，前記親ノードの名称を利用して，前記\nノードのツリーを表示するツリー表示ステップと，前記表示さ\nれたツリーのノードのうちの選択されたノードの前記自ノード\n属性値，前記親ノード属性値を表示する属性値表示ステップを\n含み，\n甲１－ｈ  前記実行ステップは，前記数式の計算により，親ノード属性\n値を自ノード属性値として代入して，自ノード属性値を求める\nステップを含む知識ベース構築方法。\nイ  本件発明１と甲１発明の一致点及び相違点\n（一致点）\n「コンピュータが情報を管理する情報管理方法であって，\n前記コンピュータに複数のノードそれぞれに対応付けて入力された管\n理すべき情報を，前記ノードを識別するノード識別情報に対応付けられ\nた複数のノードデータを含む情報として前記コンピュータが記憶する情\n報記憶ステップと，\n前記情報記憶ステップで記憶された前記情報を前記コンピュータが\n表示する情報表示ステップと，\n前記ノードデータに含まれる値に係る演算をコンピュータが実行す\nる実行ステップとを備え，\n前記ノードデータは，ルートノードを除いて，当該ノードの親ノード\nを特定する親ノード識別情報を含んでおり，\n前記情報表示ステップは，前記親ノード識別情報を利用して，前記ノ\nードの木構造を表示する木構造表示ステップと，前記表示された木構造\nのノードのうちの選択されたノードの前記自ノード変数データ，前記上\n位ノード変数データを表示するノードデータテーブル表示ステップを\n含み，\n前記実行ステップは，前記自ノード変数データの値を更新するための\n演算を実行する情報管理方法。」である点。\n（相違点１）\n本件発明１が，「管理すべき情報」を「文書ファイル」として記憶し，\n当該「文書ファイルの情報」をコンピュータが表示するものであるのに\n対し，甲１発明は，「知識」を「データベース」に記憶し，「更に前記\n知識を知識記述言語に変換して知識ベースとして記述」し，当該「知識」\nをコンピュータが表示するものである点。\n（相違点２）\n本件発明１が，「ノードデータ」に「スクリプト」を含み，当該スク\nリプトは「当該ノードデータに含まれる変数データである自ノード変数\nデータと，当該ノードの直系上位ノードのノードデータに含まれる変数\nデータである上位ノード変数データを利用した演算を行って，前記自ノ\nード変数データの値を求める代入用スクリプト」を含むものであり，情\n報表示ステップでは，前記「スクリプト」も表示されるのに対し，甲１\n発明では，ノードデータにスクリプトが含まれることは特定されておら\nず，更に当該スクリプトを表示することも特定されていない点。\n（相違点３）\n本件発明１が，「情報評価ステップ」で「前記代入用スクリプトの実\n行により，前記自ノード変数データの値を更新する」ものであるのに対\nし，甲１発明は，「実行ステップ」において「ノードデータに含まれる\n属性値の数式の計算」が行われ，計算されたノードデータに基づき「知\n識ベース」の更新が行われるものの，「情報評価ステップ」で「代入用\nスクリプト」の実行によって「自ノード変数データの値を更新」を行う\nものではない点。\n第３  当事者の主張\n１  取消事由１（新規性の判断の誤り）\n⑴  原告の主張\nア  相違点２の認定に誤りがあることについて\n(ア)ａ  甲１発明にはスクリプトが存在するから，本件審決の相違点２の\n認定は誤りである。\nｂ  本件明細書では，「次に，代入用スクリプト及び生成用スクリプト\nの具体例を，図８の「＊」を付したノードをターゲットノードとして\n説明する。図９に示すように，ターゲットノードは，要計算の公開変\n数として，「スライス数」と「色」を有しており，代入用スクリプト\nとして，「スライス数＝同一面数；」と「色＝同一面数」を有してい\nる。評価前は，図１０に示すように，公開変数「スライス数」と「色」\nの値は空欄となっている。」とし（【００７２】），スクリプトの具\n体的実施態様として，「スライス数＝同一面数；」及び「色＝巾木色；」\nという２つの数式を開示する。本件発明１において，スクリプトとは，\n単なる代入表現をその範囲に含むものである。\n一方，甲１発明では，「“内箱”のノードでは，“内箱本体”に入\n力すべき３つの属性(“高さ”  “幅”  “長さ”)を自己の大きさから\n決定する。又，“内箱”自身の大きさは，親ノードである“引き出し”\nにその決定を委ねる。」（【００３０】），「この様にして全てのデ\nータ入力作業が終了すれば，データベース内には，図６に示す如きイ\nメージでデータ構造が登録され，最上位のノードである“引き出し”\nの“高さ” “幅” “長さ”が，知識ベースに対する入力データとな\nる。」（【００３１】）として，例えばコンピュータが，「内箱本体\nの高さ」（自ノードである「内箱本体」の入力属性である「高さ」を\n意味する属性値の名称である。）に対し，内箱の「自己の高さ」（親\nノードである「内箱」の入力属性である「高さ」を意味する属性値の\n名称である。）の値を代入する態様が記載されている。具体的には，\n甲１の【図６】の\n内箱本体の高さ  自己の高さ\nとの記載がそれに該当する。これは，「自己の高さ」という名称を持\nつ属性の値を，「内箱本体の高さ」という名称を持つ属性の値に代入\nすることを示す表記であるから，単なる代入表現をスクリプトの範囲\nに含む本件発明１との関係では，このような記載もまたスクリプトを\n開示するものということができ，プログラム言語で表現すると，実質\n的に，\n内箱本体の高さ＝自己の高さ；\nという代入式が記載されているに等しいと考えることができる。\nさらに，甲１には，「属性値の定義（Ｓ６）では，決定属性に分類\nされた属性に対して属性値（“黒”，“スチール”）の入力が行なわ\nれる。ここで，属性値としては，数値に限らず，数式や条件分岐が入\n力可能である。」（【００２２】）との記載もあり，属性値として，\n数式だけでなく，条件分岐も記載することができ，これがスクリプト\nであることに疑いはない。\n(イ)  さらに，甲１に，本件発明１の構成要件Ｆの「当該ノードデータに\n含まれる変数データである自ノード変数データと，当該ノードの直系上\n位ノードのノードデータに含まれる変数データである上位ノード変数デ\nータを利用した演算を行って，前記自ノード変数データの値を求める代\n入用スクリプト」が開示されていることは，以下のとおりである。\n甲１発明では，自ノードを「内箱本体」とした場合，この直系上位ノ\nード「内箱」の変数データ「高さ」の値を，自ノード「内箱本体」の変\n数データ「高さ」に代入する甲１の【図６】の\n内箱本体の高さ  自己の高さ\nとの表記が，上位ノード変数データ「自己の高さ」（＝直系上位ノード\n「内箱」の入力属性「高さ」）を，自ノード変数データ「内箱本体の高\nさ」（＝自ノード「内箱本体」の入力属性「高さ」）に代入して，その\n値を求める代入用スクリプトである。仮に，「内箱本体の高さ」，「内\n箱本体の幅」及び「内箱本体の長さ」は上位ノード変数データに該当し，\n自ノード「内箱本体」の入力属性である「高さ」，「幅」及び「長さ」\nは自ノード変数データに該当すると解したとしても，上位ノード変数デ\nータ「内箱本体の高さ」を，自ノード「内箱本体」の自ノード変数デー\nタ「高さ」に代入して，その値を求めていることになる。\nところで，この代入用スクリプトは，自ノード変数データ「高さ」が\n含まれている自ノード「内箱本体」ではなく，直系上位ノード「内箱」\nに記載されている。しかし，本件発明１において，代入用スクリプトと\n自ノード変数データとが，同一のノードデータに含まれることは要件と\nされていないから，この点が，本件発明１と甲１発明との相違点となる\nことはない。すなわち，本件発明１では，構成要件Ｂで「複数のノード\nデータを含む文書ファイル」が規定されていることから，本件発明１は，\n文書ファイル中に，１つではなく，２つ以上のノードデータを具備する\nものであり，これを受けた構成要件Ｄの「前記ノードデータ」，構成要\n件Ｆの「当該ノードデータ」は，いずれも構成要件Ｂの「複数のノード\nデータ」を意味する。構成要件Ｄは，①「複数のノードデータのいずれ\nかがスクリプトを含む」ことを規定し，構成要件Ｆは，②「代入用スク\nリプトが，複数のノードデータのいずれかに含まれる自ノード変数デー\nタと，その上位ノード変数データとを利用した演算により自ノード変数\nデータを求める」ことと，③「スクリプトが代入用スクリプトを含む」\nこととを規定している。代入用スクリプトも，自ノード変数データも，\n共に複数のノードデータのいずれかに含まれていれば足りるものであり，\n両者が同じノードに含まれていることは，一切規定されていない。\n仮に甲１発明において，代入用スクリプトと自ノード変数データとが\n同じノードに含まれることが要件であるとしても，甲１には代入用スク\nリプトの開示がある。すなわち，甲１の【図６】の自ノード「内箱本体」\nにおける，\n入力属性  高さ\n…\n…\nとの記載は，自ノード「内箱本体」の変数「高さ」に対し，上位ノード\n変数の値を入力するスクリプトを意味する。そして，その際に入力に用\nいられるのは，\n内箱本体の高さ  自己の高さ\nとの代入用スクリプトである。そうすると，甲１の【図６】における自\nノード「内箱本体」には，結局のところ，\n「高さ」＝（「内箱本体の高さ」＝「自己の高さ」）；\nという，親ノード変数データの値「内箱本体の高さ」を，自ノード変数\nデータ「高さ」に代入するための，代入用スクリプトが含まれている。\n(ウ)  このように，甲１には，代入用スクリプトの開示があることを前提\nとすれば，甲１発明は，正しくは以下のとおり認定されるべきである。\n甲１－ａ  コンピュータが知識ベースを構築する知識ベース構築方法\nであって，\n甲１－ｂ  前記コンピュータに複数のノードそれぞれに対応付けて入\n力された知識を，前記ノードを定義するノード名称に対応付\nけられた複数のノードデータを含むデータベースに前記コ\nンピュータが記憶し，更に前記知識を知識記述言語に変換し\nて知識ベースとして記述する記憶ステップと，\n甲１－ｃ  前記記憶ステップで記憶された知識を前記コンピュータが\n表示する表示ステップと，\n甲１－ｄ  前記ノードデータに含まれる属性値のスクリプトを前記コ\nンピュータが実行する実行ステップとを備え，\n甲１－ｅ  前記ノードデータは，最上位のノードを除いて，当該ノー\nドの親ノードを特定する親ノードの名称を含み，前記ノード\nデータには前記スクリプトを含み，\n甲１－ｆ  前記スクリプトは，当該ノードの親ノードのノードデータ\nに含まれる属性値である親ノード属性値（『内箱の本体の高\nさ』）を当該ノードデータに含まれる属性値である自ノード\n属性値（『高さ』）として代入するスクリプトを含んでおり，\n甲１－ｇ  前記表示ステップは，前記親ノードの名称を利用して，前\n記ノードのツリーを表示するツリー表示ステップと，前記表\n示されたツリーのノードのうちの選択されたノードの前記\n自ノード属性値，前記親ノード属性値を表示する属性値表示\nステップを含み，\n甲１－ｈ  前記実行ステップは，前記スクリプトにより，親ノード属\n性値を自ノード属性値として代入して，自ノード属性値を求\nめるステップを含む\n知識ベース構築方法。\n(エ)  本件審決が，相違点２を本件発明１と甲１発明の実質的相違点とし\nた根拠は，専ら甲１の「数式や条件分岐」が「スクリプト」とは異なる\nという点に依拠したものであるから，甲１の数式や条件分岐がスクリプ\nトに該当するものである以上，本件審決の相違点２の判断には誤りがあ\nる。\nこの点は，本件発明１４についても同様である。\nイ  相違点３の認定に誤りがあることについて\n(ア)  本件審決が，相違点３を本件発明１と甲１発明の実質的な相違点と\nした理由の１つは，甲１にスクリプトが開示されていないというもので\nあり，これが誤りであることは，前記アで主張したとおりである。\n(イ)  本件審決は，本件発明１の構成要件Ｈについて，「シミュレーショ\nン動作のために具体的には，図６の「操作ボタン表示領域２０ａ」にあ\nる，「「評価」ボタン」を押下し，その結果として「自ノード変数デー\nタの値」の値が更新されることを意味するものと解される。」とし，こ\nの点が甲１発明に記載されていないことも，実質的な相違点と認定して\nいる。\nａ  本件発明１の記載を正しく解釈すれば，構成要件Ｈの「更新」ステ\nップは，文書ファイルに含まれている自ノード変数データの値を変更\nするものであれば足りる。本件審決が，本件発明１の更新ステップが\n「操作ボタン表示領域２０ａにある評価ボタンを押下する」との態様\nに限定される根拠とする本件明細書の記載は，いずれも実施例にすぎ\nない。\nｂ  甲１発明では，構成要件１－ｈは「前記実行ステップは，前記スク\nリプトにより，親ノード属性値を自ノード属性値として代入して，自\nノード属性値を求めるステップを含む」というものであるが，ここで\nスクリプトにより代入された自ノード属性値は，甲１の「…最上位の\nノードに入力属性として定義されている属性名が，知識ベース運用の\n際にデータを入力すべき項目であり，該データ入力によって知識ベー\nスが動作を開始することになる。」（【００２３】），「…あるノー\nドの知識を変更する場合は，詳細知識定義装置(６)を用いてデータベ\nース(４)の該当箇所を書き換えるだけで，これが知識ベース(１)の知\n識に反映される。」（【００２６】）との記載から明らかなように，\n知識ベースの知識に反映されることとなる。\nそして，知識ベースが文書ファイルであることについては，審決に\nおいて，相違点１が実質的相違点でないとして適切に認定されたとお\nりであるから，甲１には，文書ファイルに記載された自ノード属性値\nをスクリプトにより変更することが開示されている。\nウ  新規性の判断に誤りがあることについて\n前記ア及びイのとおり，正しく認定された甲１発明を前提とすれば，本\n件発明１と甲１発明の相違点２及び相違点３は存在しない。\n同様に，本件発明１４と甲１発明の相違点２及び相違点３も存在しない。\nしたがって，本件審決の判断は誤りである。\nエ  小括\n以上のとおり，本件発明１と甲１発明に相違点は存在しないから，本件\n発明１は，本件特許出願の優先日前に頒布された刊行物である甲１に記載\nされた発明ではないとした本件審決の判断は誤りである。また，同様に，\n本件発明１の発明特定事項を全て含む本件発明１４について，本件特許出\n願の優先日前に頒布された刊行物である甲１に記載された発明ではない\nとした本件審決の判断は誤りである。\n⑵  被告の主張\nア  相違点２の認定に誤りがないことについて\n(ア)  本件発明１における「スクリプト」の意義\nａ  スクリプトとは「コンピューターで，一連の処理手順を記述した簡\n易プログラム」（甲１４），「プログラムやマクロを記述したテキス\nトファイル」，「コンピュータに処理を自動的に実行させるための命\n令を記述したファイル」（乙１）を意味し，このようなスクリプトを\n記述する言語を「スクリプト言語」という（乙２）。\nｂ  本件発明１において，「スクリプト」は，スクリプト言語として使\n用されている任意の言語を使用して作成されるものである（本件明細\n書【００１６】，【００１９】，【００３４】，【００５７】）。\nｃ  本件発明１の構成要件Ｇの「…スクリプトを表示するノードデータ\nテーブル表示ステップ」の記載及び本件明細書【００４６】の記載か\nら明らかなとおり，スクリプトは画面に表示される。\nｄ  本件明細書【００５７】の記載から，「スクリプト」は，本件発明\nを利用する者がスクリプト領域又は別のウィンドウを通して直接入力\nできるものである。\nｅ  本件明細書【００６７】以下及び【図１２】のとおり，「スクリプ\nト」はそのまま実行される。\nｆ  以上によれば，本件発明における「スクリプト」は，①任意のスク\nリプト言語を使用して作成される簡易なプログラムであって，②作業\n者が，スクリプトの画面表示を通じて，直接入力し，実行できるプロ\nグラムをいう。\n(イ)  本件発明１における「代入用スクリプト」の意義\n本件明細書【００３２】の記載から，本件発明１における「代入用ス\nクリプト」は，(ア)のとおりの性質を有する簡易なプログラムであって，\nかつ，自ノードの変数の値を演算するために，自ノードの変数の値であ\nる自ノード変数データと，そのノードの直系上位ノードの公開変数の値\nである上位ノード変数データを利用して記述されるものをいう。\n(ウ)  甲１発明における「スクリプト」ないし「代入用スクリプト」の不\n存在\nａ  甲１発明において，「知識ベース」は「知識記述言語」で記述され\nるところ，この「知識ベース」は，所定の「知識記述言語」で記述さ\nれた一種のコンピュータプログラムであり，「知識記述言語」はプロ\nグラミング言語である。\n甲１発明において，データベース内のデータは，「データ変換装置」\nにより「知識記述言語」に変換されるから，データベース内のデータ\nは，「知識記述言語」すなわちプログラミング言語，スクリプト言語\nで記載されたものではなく，「スクリプト」に当たらない。\nｂ  原告は，甲１の【図６】がスクリプトであると主張するが，そこか\nら読み取れるのは，「内箱」ノードの「内箱本体の高さ」と「自己の\n高さ」が同じ値となるという限度であり，「内箱」ノードの「高さ」\nを「内箱本体」ノードの「高さ」に代入しているとはいえない。\nまた，甲１には，原告の指摘する記載（内箱本体の高さ・自己の高\nさ）が，知識記述言語，すなわちプログラミング言語，スクリプト言\n語であるとの記載も示唆もない。\n甲１発明は，「知識ベースを構築する際には， 知識記述言語につい\nての知識や経験が必要である」（【０００２】）という従来技術の課\n題に対し，「知識記述言語（すなわちプログラミング言語，スクリプ\nト言語）についての知識や経験を有しない知識所有者であっても，階\n層構造定義装置(５)，詳細知識定義装置(６)及び知識参照装置(７)を\n操作することによって，容易に知識ベース(１)を構築することが出来\nる」ことを作用効果とするものであり（【００３２】），データベー\nス内に知識記述言語（すなわち，プログラミング言語，スクリプト言\n語）の記載を求めることは，上記作用効果を阻害するものであって，\n甲１発明の【図６】に「スクリプト」が開示されているとはいえない。\nイ  相違点３の認定に誤りがないことについて\n本件審決において，相違点３は，「情報評価ステップ」で「代入用スク\nリプト」の実行によって「自ノード変数データの値を更新」する点に求め\nられており，ボタンの押下についてのみ指摘する原告の主張は失当である。\nウ  新規性の判断に誤りがないことについて\n原告主張の甲１発明を認定することはできないから，本件発明１と甲１\n発明の間には，本件審決認定のとおり相違点２及び相違点３が存在し，こ\nれらは実質的なものである。\n同様に，本件発明１４と甲１発明の間には相違点２及び相違点３が存在\nし，これらは実質的なものである。\nエ  小括\n以上のとおり，本件発明１と甲１発明には相違点が存在し，それは実質\n的なものであるから，本件発明１は，本件出願の優先日前に頒布された刊\n行物である甲１に記載された発明ではないとした本件審決の判断には誤\nりがない。また，同様に，本件発明１の発明特定事項を全て含む本件発明\n１４について，本件出願の優先日前に頒布された刊行物である甲１に記載\nされた発明ではないとした本件審決の判断には誤りがない。\nしたがって，原告主張の取消事由１は理由がない。\n２  取消事由２（甲１発明を主引用例とする進歩性判断の誤り）\n⑴  原告の主張\nア  相違点２及び相違点３に係る容易想到性判断に誤りがあることについて\n甲１発明は，正しくは前記１(1)ア(ウ)のとおり認定されるべきである\nところ，この場合，本件発明において，代入用スクリプトと自ノード変数\nデータとが，同一のノードデータに含まれるのに対し，甲１発明ではそう\nではないことが，本件発明１と甲１発明の相違点に当たることになり，甲\n１発明において，直系上位ノード「内箱」に含まれている代入用スクリプ\nトを，直系上位ノードではなく，自ノードに含ませることとすることの容\n易想到性が問題となる。\n(ア)  甲３には，代入用スクリプトを，当該スクリプトによって値が代入\nされることになる変数データを含んだ自ノードに記載することが開示さ\nれ，甲７には，階層構造を有するデータにおいて，スクリプトを，当該\nスクリプトによって値が演算されることになるノード変数データを含ん\nだ自ノードに記載することが開示されている。さらに，甲２には，ノー\nドデータにおいて，代入用スクリプトを，当該代入用スクリプトによっ\nて値が代入されることになる変数データを含んだ自ノードに記載するこ\nとが示唆されている。\nしたがって，当業者において，甲１発明について，本件発明１との相\n違点に係る構成である「代入用スクリプトが自ノードに含まれる」もの\nとすることは，設計事項にすぎないものであり，容易に想到できる。\n(イ)  被告は，甲１発明では下位から上位への順に定義する旨が記載され\nており，これを上位から下位という順に変更することについて動機付け\nがなければ構成の変更は容易とはいえないと主張するが，被告の指摘す\nる「下位ノードから上位ノードに向かって，必要な属性値の定義等を行\nっていく」という態様は，甲１発明の一実施例にすぎないものである。\nイ  本件審決認定に係る相違点２の容易想到性判断に誤りがあることについ\nて\n相違点２を本件審決のとおりに認定したとしても，本件審決の相違点２\nの容易想到性の判断には誤りがある。\n本件審決は，知識記述言語についての知識や経験を持たない知識所有者\n自身によって操作されるデータベースを介して操作することにより，知識\nベース構築者自身が知識ベースを容易に構築することが出来るようにす\nるという甲１発明の課題や目的に照らせば，「ノードデータ」に「スクリ\nプト」を含ませ，さらに当該スクリプトに「代入用スクリプト」を含むよ\nう構成することは，その動機付けを欠き阻害要因を有するとか，数式や条\n件分岐を「スクリプト」に変換して表示させる必要性はないと判断した。\nしかし，甲１発明によって達成されるのは，システム開発者が間に立つ\nことなく，知識をデータベース経由で知識ベースに入力可能となる点及び\n知識の体系化が自動的に行われる点に限られるのであり（【００１２】），\n甲１発明において，ノードデータに記載される数式や条件分岐をスクリプ\nトで記載し，表示することができることとしても，①知識を知識所有者が\n自らデータベースに入力可能である，②知識の体系化が自動的に行われる，\nという甲１発明の効果が阻害されることはない。\nまた，本件発明１の「スクリプト」は，単なる代入表現をその範囲に含\nむものであり，かかる表現であれば，知識記述言語についての知識や経験\nを有することのない知識所有者であっても，容易に記述することができる。\n仮に，甲１発明が，プログラムの知識や経験がない知識所有者が直接知\n識を追加・修正することができるよう，データベースに記載する数式や条\n件分岐をスクリプトで記述することを認めないものであるとしても，知識\n記述言語についての知識や経験を有するシステム開発者が，知識ベースの\n知識を直接見ることができることとするため，知識ベースにスクリプトと\nして反映された数式や条件分岐等の属性値を表示するための機能を付加\nすることは，上記甲１発明の課題や目的に反するものではない。\nしたがって，本件審決における相違点２に関する容易想到性の判断は誤\nりである。\nウ  本件審決認定に係る相違点３の容易想到性判断に誤りがあることについ\nて\n甲１発明において，ノードデータにスクリプトを記載し，表示すること，\n及び「評価」ボタンにより「自ノード変数データの値を更新」することは，\nいずれも当業者の設計事項であり，阻害要因はない。\nしたがって，本件審決の相違点３の容易想到性の判断は誤りである。\nエ  小括\n以上によれば，本件発明１は，甲１発明及び甲２ないし１０に記載され\nた発明に基づいて，当業者が容易に発明をすることができたものであるか\nら，これを否定した本件審決の判断は誤りである。また，同様に，本件発\n明１の発明特定事項を全て含む本件発明１４についても，甲１発明及び甲\n２ないし１０に記載された発明に基づいて，当業者が容易に発明をするこ\nとができたものであるから，これを否定した本件審決の判断は誤りである。\n⑵  被告の主張\nア  原告主張のとおりに甲１発明を認定したとしても，本件審決の容易想到\n性判断に誤りがないことについて\n仮に，甲１発明が前記１(1)ア(ウ)のとおり認定されるべきであるとし\nても，甲３には，本件発明１における意義の「ノード」，すなわち「ノー\nドの木構造」を「表示」できる態様のノードの記載はないし，甲２及び甲\n７には「スクリプト」は開示されていない。\nしたがって，当業者において，甲１発明について，本件発明１との相違\n点に係る構成である「代入用スクリプトが自ノードに含まれる」ものとす\nることが設計事項にすぎないとはいえない。\nまた，甲１発明では下位から上位への順に定義する旨が記載されており，\nこれを上位から下位という順に変更することについて動機付けがなけれ\nば，原告のいうような構成の変更は容易とはいえないし，甲１【００２９】\n及び【００３０】が，自ノードの属性を「親ノード…にその決定を委ねる」\n旨記述し，【図６】で「親ノード…にその決定を委ねる」態様として，親\nノード側に代入関係を記載していること，甲１【００２８】のとおり，当\n初のデータ作成において下位から上位にデータを入力していく態様が取\nられていることからすれば，甲１発明において上位ノードから下位ノード\nに数値を引き継ぐ場合の代入関係は上位ノードに記述されることが予定\nされ，下位ノードに記述することは想定していないと考えるのが自然であ\nり，当業者がソフトウェアの効率性を犠牲にしてまで代入関係を上位ノー\nドに記述する態様に加えて下位ノードに記述できる態様を加える技術的\n意義はない。\nイ  本件審決認定に係る相違点２の容易想到性判断に誤りがないことについ\nて\nノードデータにスクリプトを記載させるということは，甲１発明の利用\n者がスクリプトを記載できることを意味するところ，甲１発明は，プログ\nラミング言語を扱えない知識所有者による利用を想定した技術なのであ\nるから，甲１発明の数式や条件分岐をスクリプトとして記載することはむ\nしろ甲１発明の目的に反する。\nウ  本件審決認定に係る相違点３の容易想到性判断に誤りがないことについ\nて\n相違点３に関する事項は，当業者の設計事項であり，阻害要因はない旨\nの原告の主張は，その前提を誤り，かつ理由がないものであり，本件審決\nにおける相違点３に関する容易想到性の判断に誤りはない。\nエ  小括\n以上によれば，本件発明１及び本件発明１４は，甲１発明及び甲２ない\nし１０に記載された発明に基づいて，当業者が容易に発明をすることがで\nきたものではないから，本件審決の判断に誤りはない。\nしたがって，原告主張の取消事由２は理由がない。\n３  取消事由３（実施可能要件違反）\n⑴  原告の主張\nア  本件発明１は，被告の主張によれば，文書ファイルの内容を変更しない\n態様を含むものであるが，この態様は，明細書に一切記載がない。\nしたがって，本件明細書は，当業者が過度の試行錯誤を行う必要なく，\n本件発明を実施することができる程度に記載されたものとはいえず，本件\n審決の判断には誤りがある。\nイ  なお，原告は，審判手続において，被請求人（被告）の主張によれば，\n本件発明は，文書ファイルに含まれる自ノード変数データの値を書き換え\nない態様を含むものであるから，実施可能要件違反であるとの内容を主張\nしたが，本件審決は，上記原告の主張が「専ら本件無効審判事件と関連す\nる侵害訴訟においてなされる，被請求人の主張に基づくものであり，当該\n訴訟は，本件無効審判事件と関連するものであることは推察されるものの，\n本件無効審判事件の，とりわけ無効理由３について検討するにあたっては\n考慮されない」と判断している。しかし，本来，本件審決は，本件発明が\n文書ファイルに含まれる自ノード変数データの値を書き換えない態様を\n含むものであるか，それとも含まないものであるかについて判断した上で，\n無効理由３についての結論を示すべきであったものであり，不当である。\nウ  本件発明１は実施可能要件に適合しないから，本件発明１４も実施可能\n要件に適合しない。\nしたがって，これと異なる本件審決の判断は誤りである。\n⑵  被告の主張\nア  本件明細書には，自ノード変数データの値を書き換えない実施例が開示\nされており，原告の主張には理由がない。\nすなわち，実施例では，表示画面（【図６】）がツリービューアとデザ\nインテーブルから構成される（【００４４】）。デザインテーブルは，ツ\nリービューアに表示されたノードのうち選択されたノードが有する情報\nを表示する領域であり，このうち操作ボタン表示領域２０ａには，デザイ\nンテーブルに関する各種操作を行うための操作ボタンが表示されている\n（【００４６】）。表示ボタンには，「更新」ボタンと「評価」ボタンが\n含まれている。\n「評価」ボタンは，代入用スクリプトを実行するものである（【００６\n７】）。「評価」ボタンを押下することにより，代入用スクリプトが実行\nされる。これにより，公開変数「スライス数」の値に，上位ノードの公開\n変数である「同一面数」の値「１」が代入される（「色」「巾木色」も同\n様）（【００７３】）。そして，その結果はデザインテーブルに表示され\nる（【図１３】）。\nこのようにして変更されたデザインテーブルの編集内容は，「更新」ボ\nタンを押すことによって，文書情報に反映される（【００５８】）。\n構成要件Ｈの文言は「前記情報評価ステップは，前記代入用スクリプト\nの実行により，前記自ノード変数データの値を更新するステップを含む」\nであり，特許請求の範囲としてクレームされているのは代入用スクリプト\nの実行による情報評価ステップである。これは，上記実施例でいえば，「評\n価」ボタンの機能を指すものであり，「更新」ボタンの機能を含むもので\nはない。すなわち，情報を表示画面（実施例ではデザインテーブル）に表\n示するところまでをクレームしているのであり，その後の文書情報に反映\nする機能はクレームには含んでいない。\nこの点は，本件審決も「評価」ボタンの押下が，「代入用スクリプト」\nの実行に該当することを適切に認定しているところである。\n本件審決は，構成要件Ｈの「更新」が，「評価」ボタンの押下により実\n行されるものであり，文書ファイルの書換えを伴うものではないことを前\n提に実施可能性要件を判断したものであり，本件発明１が実施可能要件に\n適合するとした本件審決の判断に誤りはない。\nイ  本件発明１は，実施可能要件に適合するから，本件発明１が実施可能要\n件に適合することを前提に，本件発明１４が実施可能要件に適合するとし\nた本件審決の判断に誤りがあるとの原告の主張も理由がない。\nしたがって，原告主張の取消事由３は理由がない。\n４  取消事由４（サポート要件違反）\n⑴  原告の主張\nア  本件発明１は，被告の主張によれば，文書ファイルの内容を変更しない\n態様を含むものである。ところが，本件明細書を参酌しても，文書ファイ\nルに含まれる自ノード変数データの値を書き換えることなく，どのように\nして情報の更新を行うのか，どのように多数の利用者間で更新した情報を\n共有し，再利用することができるのか全く明らかでない。\nイ  本件審決は，被請求人（被告）の主張によれば，本件発明が文書ファイ\nルに含まれる自ノード変数データの値を書き換えない態様を含むもので\nあるにもかかわらず，サポート要件違反であるとの原告の主張について判\n断を示しておらず，不当である。\nウ  本件明細書は，当業者が本件発明１により，その課題を解決できるもの\nと認識できる程度に記載されたものとはいえず，本件発明１はサポート要\n件に適合しない。\n本件発明１はサポート要件に適合しないから，本件発明１４もサポート\n要件に適合しない。\nしたがって，これと異なる本件審決の判断は誤りである。\n⑵  被告の主張\nア  原告の主張は，本件明細書において，文書ファイルに含まれる自ノード\n変数データの値を書き換えることなく，どのようにして情報の更新を行う\nのかが明らかでないというものであるが，前記３⑵で主張したとおり，「評\n価」ボタンの押下による更新が文書ファイルの書換えを含まないことは，\n本件明細書の記載から明らかであるから，原告の主張は前提を欠く。\nイ  以上のとおり，本件発明１は，サポート要件に適合するから，本件発明\n１がサポート要件に適合することを前提に，本件発明１４がサポート要件\nに適合するとした本件審決の判断に誤りがあるとの原告の主張も理由が\nない。\nしたがって，原告主張の取消事由４は理由がない。\n第４  当裁判所の判断\n１  明細書の記載事項について\n⑴   本件明細書（甲１８）の発明の詳細な説明には，別紙１の記載がある。\n(2)  前記(1)の記載事項によれば，本件明細書には，本件発明に関し，次のよ\nうな開示があることが認められる。\nア  コンピュータを用いて各種情報の管理を行う場合，それぞれの情報を記\n憶したファイルを，所定のフォルダに保管することによって行うのが一般\n的であるが，作成したフォルダの構造及びそれぞれのフォルダに保管する\nファイルの種類等は，任意であってフォルダの作成者に依存するため，作\n成者以外の者が必要な情報に適確にアクセスすることは，必ずしも簡単で\nはない（【０００２】）。このような問題に対処するため，案件（プロジ\nェクト）毎にツリーを作成して表示し，作成した文書ファイルを，表示さ\nれたツリーの任意のノードに付随させて，サーバコンピュータに保管する\n文書情報管理システムや，異なる計算機やアプリケーションで共通に取扱\nうことができるＸＭＬのような構造化文書規格を用いた構造化文書を木\n構造として捉えて処理する構造化文書処理システムも存在したが，木構造\nのノードに含まれる情報は，相互に関連するものが多いにもかかわらず，\nこれらの管理システムにおいては，それぞれの文書の該当する部分を個別\nに更新する必要があり，十分効率的とはいえなかった（【０００３】ない\nし【０００５】）。\nイ  「本発明」は，上記事情に鑑み，管理すべき情報の更新を，簡単かつ効\n率的に行うことができる情報管理方法を提供することを目的とし，その課\n題を解決する手段として，コンピュータが情報を管理する情報管理方法で\nあって，前記コンピュータに複数のノードそれぞれに対応付けて入力され\nた管理すべき情報を，前記ノードを識別するノード識別情報に対応付けら\nれた複数のノードデータを含む文書ファイルとして前記コンピュータが\n記憶する情報記憶ステップと，前記情報記憶ステップで記憶された前記文\n書ファイルの情報を前記コンピュータが表示する情報表示ステップと，前\n記ノードデータに含まれるスクリプトを前記コンピュータが実行する情\n報評価ステップとを備え，前記ノードデータは，ルートノードを除いて，\n当該ノードの親ノードを特定する親ノード識別情報を含んでおり，前記ス\nクリプトは，当該ノードデータに含まれる変数データである自ノード変数\nデータと，当該ノードの直系上位ノードのノードデータに含まれる変数デ\nータである上位ノード変数データを利用した演算を行って，前記自ノード\n変数データの値を求める代入用スクリプトを含んでおり，前記情報表示ス\nテップは，前記親ノード識別情報を利用して，前記ノードの木構造を表示\nする木構造表示ステップと，前記表示された木構造のノードのうちの選択\nされたノードの前記自ノード変数データ，前記上位ノード変数データ及び\n前記スクリプトを表示するノードデータテーブル表示ステップを含み，前\n記情報評価ステップは，前記代入用スクリプトの実行により，前記自ノー\nド変数データの値を更新するステップを含むという構成を採用した（【０\n００７】，【０００８】）。\nウ  「本発明」においては，利用者が入力したデータに含まれるスクリプト\nを利用して，ノードデータを更新することができるので，管理すべき情報\nの更新を，簡単かつ効率的に行うことができ，複数のノードデータを含む\n１つの文書データを用いて，個々の業務や案件に関する情報を管理してい\nるので，多数の利用者による情報の共有化，再利用を，簡単かつ効率的に\n行うことができるとともに，文書データに基づいて，簡単にノードの木構\n造を表示させることができるため，業務や案件全体の把握を簡単に行うこ\nとができ，さらに，表示された木構造の個々のノードに対応付けられた詳\n細情報を簡単に表示することができる（【０００９】）ため，「本発明」\nによれば，管理すべき情報の更新を，簡単かつ効率的に行うことができる\nという効果を奏する（【００２４】）。\n２  取消事由１（新規性の判断の誤り）について\n(1)  甲１の記載事項について\nア  甲１には，別紙２の記載がある。\nイ  前記アの記載事項によれば，甲１には，次のような開示があることが認\nめられる。\n(ア)  知識ベースを構築する際には，知識記述言語についての知識や経験\nが必要であり，従来は，知識ベース(１)に接続した知識ベース構築装置\n(13)は，知識記述言語についての知識や経験を有するシステム開発者\n(14)が操作する運用形態を採っていた。システム開発者(14)は，知識ベ\nース構築に際して知識所有者(15)との口頭でのインタビューを行なっ\nて，知識所有者(15)から知識を獲得し，これに基づいて資料を作成し，\n知識を体系化した上，該資料に基づいて，知識ベース構築装置(13)を操\n作し，知識ベース(１)を構築していた。しかし，インタビューが口頭で\n行われるため，知識ベース(１)を一旦構築した後も，知識の追加や修正\nが必要となり，また，資料作成のために多大な労力と時間を要し，その\n上，知識所有者(15)の知識が知識体系化の際に作成された資料と知識ベ\nース(１)内に記述された知識とによって保存され，管理されているから，\n知識を追加し，或いは修正する必要が生じた場合には，システム開発者\n(14)が再度，知識所有者(15)とのインタビューを行なって，知識の獲得，\n体系化，及び知識ベース構築のプロセスを繰り返さねばならず，一連の\n処理が極めて煩雑となる問題があった（【０００２】ないし【０００６】）。\n(イ)  「本発明」は，知識ベースと知識ベース構築者の間に，知識所有者\n自身が操作可能なユーザインターフェースを設けることによって，知識\nベース構築者自身が知識ベースを容易に構築することが出来る知識ベ\nース構築システムを提供することを目的とし，課題を解決するための手\n段として，複数のノードを互いに関係づけてなる階層構造を有して各ノ\nードには詳細な知識が定義されるデータ構造のデータベース(４)と，該\nデータベース(４)内のデータを前記知識記述言語に変換して知識ベー\nス(１)に記述するデータ変換装置(３)と，データベース(４)内に知識の\n階層構造を定義するための階層構造定義装置(５)と，データベース(４)\n内に定義された階層構造の各ノードに対して詳細な知識を定義するた\nめの詳細知識定義装置(６)とを具えた構成を採り，これにより，知識所\n有者自身が知識ベース構築者となって操作することができ，従来の知識\nベース構築者による知識獲得プロセスは不要となり，知識の体系化は自\n動的に行なわれ，その結果が全てデータベースに登録されるため，知識\nの統一的な保存，管理が可能となり，さらに，知識ベースの知識を変更\nする必要が生じた場合にも，データベースを修正する処理だけで済むと\nいう効果を奏する（【０００７】，【０００８】，【００１２】）。\n⑵  相違点２の認定の誤りについて\nア  原告は，甲１発明にはスクリプトが含まれているとして，本件審決が相\n違点２を実質的なものと認定したのを誤りと主張する。\n(ア)  甲１発明の実施例では，製品設計に関する知識ベースを作成する場\n合，先ず階層構造定義装置(５)の操作によって，製品を構成する複数の\n部品のそれぞれにノード名称を付し，これをツリー上に連結して親子関\n係を定義する（【００１５】ないし【００１７】）。\n次に，部品構成ツリー上の各ノード，すなわち部品や部位についての\n知識が詳細知識定義装置(６)によって定義される。この作業は階層構造\nの下位から上位へ向かってノード毎に行われ，各ノード毎に図３に示す\n処理が実行される。まず，１つのノードが選択され（Ｓ３），選択され\nたノードについて，必要な属性の定義(Ｓ４。例えば部品の高さ，幅，長\nさ，色，材質等の属性名の定義)，属性の分類(Ｓ５。自己の親ノードか\nらその属性値を入力すべき属性である入力属性（部品の高さ，幅，長さ）\nと，自己のノードで属性値を決定すべき決定属性（色，材質等）への分\n類)及び属性値の定義（Ｓ６。決定属性への属性値（黒，スチール等）の\n入力）が行われる（【００１９】ないし【００２２】）。この属性値の\n入力について，「数値に限らず，数式や条件分岐が入力可能である。」\nと明記されている（【００２２】）ところ，ここでいう数式や条件分岐\nは，記述に基づいてコンピュータが処理を実行するためのものであり，\nスクリプトの定義である「コンピューターで，一連の処理手順を記述し\nた簡易プログラム」（甲１４）に当てはまり得る。\n(イ)  しかしながら，本件発明１の構成要件Ｆは，「前記スクリプトは，\n当該ノードデータに含まれる変数データである自ノード変数データと，\n当該ノードの直系上位ノードのノードデータに含まれる変数データであ\nる上位ノード変数データを利用した演算を行って，前記自ノード変数デ\nータの値を求める代入用スクリプトを含んでおり，」というものである\nところ，甲１発明に「スクリプト」が開示されているとしても，これに\n「代入用スクリプト」が含まれているかが問題となる。\nａ  甲１発明では，数式や条件分岐が含まれると明示されているのは，\n自己のノードで属性値を決定すべき「決定属性」に分類された属性に\n対する属性値の入力である「属性値の定義」のみである（【００２２】）。\n甲１の【図６】の「引き出し」ノードの「決定属性」中の「内箱の高\nさ」欄の「自己の高さ－外箱の肉厚×２」との表記がこれに当たるが，\nこれは自ノード変数データと上位ノードの変数データを利用した演算\nではない。\n甲１発明では，入力属性は，自己の親ノードからその属性値をその\nまま入力すべき属性であり，例えば甲１の【図６】では，「内箱本体」\nノードの入力属性欄の変数「高さ」に対し，上位ノード「内箱」の変\n数「内箱本体の高さ」の値を入力しているが，これは入力がされてい\nるだけで，これに加えて，自ノード変数データと上位ノードの変数デ\nータを利用した演算を行っているものではない。\nそして，これ以外に，甲１において，自ノード変数データと，当該\nノードの直系上位ノードのノードデータに含まれる変数データである\n上位ノード変数データを利用した演算を行っていることの開示はない。\nｂ  次に，原告は，甲１には，例えばコンピュータが，自ノードである\n「内箱本体」の入力属性である「高さ」を意味する属性値の名称であ\nる「内箱本体の高さ」に対し，親ノードである「内箱」の入力属性で\nある「高さ」を意味する属性値の名称である内箱の「自己の高さ」の\n値を代入する態様が記載されているとし，具体的には，甲１の【図６】\nの「内箱」にある\n内箱本体の高さ  自己の高さ\nとの記載がそれに該当すると主張する。しかし，甲１発明については，\n部品構成ツリー上の各ノードを定義する作業は階層構造の下位から上\n位へ向かってノード毎に行われるとされているのであり（【００１９】），\n上記記載の自ノードは「内箱本体」でなく「内箱」であり，内箱ノー\nドについての自ノード変数データである「「自己の高さ」の値」を，\n同じく内箱ノードについての自ノード変数である「内箱本体の高さ」\nに代入しているというべきである。上記記載が，自己のノードにて属\n性値を決定すべき（【００２１】）「決定属性」の欄にあることもこ\nれを裏付ける。換言すれば，同記載は，「内箱」ノードに対する「引\nき出し」ノードのような親（上位）ノードで定義された属性の属性値，\nすなわち上位ノード変数データを利用しておらず，「当該ノードデー\nタに含まれる変数データである自ノード変数データと，当該ノードの\n直系上位ノードのノードデータに含まれる変数データである上位ノー\nド変数データを利用した演算を行って，前記自ノード変数データの値\nを求める代入用スクリプトを含んでおり」という本件発明の構成要件\nＦと一致するとはいえない。\nｃ  さらに，原告は，本件発明１では，代入用スクリプトも自ノード変\n数データも，共に複数のノードデータのいずれかに含まれていれば足\nりるものであり，両者が同じノードに含まれていることは，一切規定\nされていないので，甲１発明で，本件記載が，自ノード変数データ「高\nさ」が含まれている自ノード「内箱本体」ではなく，直系上位ノード\n「内箱」に記載されていることは，本件発明と甲１発明との相違点と\nなることはないと主張する。\nしかしながら，構成要件Ｆに記載された「当該ノードデータ」を，\n原告が主張するように文書ファイルに含まれる「複数のノードデータ」\nと解釈した場合，「複数のノードデータ」に対する「当該ノードの直\n系上位ノードのノードデータ」がどのノードデータを意味するのか特\n定できなくなり，「当該ノードデータに含まれる変数データである自\nノード変数データ」及び「当該ノードの直系上位ノードのノードデー\nタに含まれる変数データである直系上位ノード変数データ」が特定で\nきなくなることによって構成要件Ｆ「代入用スクリプト」が特定でき\nなくなるから，原告が主張するように解釈する余地はない。また，特\n許請求の範囲の記載を素直に読めば，本件発明１の構成要件Ｆの「当\n該ノードデータ」とは，ある代入用スクリプトが値を求める変数デー\nタ（自ノード変数データ）を含むノードデータであって，特定の一つ\nのノードデータを意味することは明らかというべきである。さらに，\n本件明細書の【図９】でも，「MW70 巾木（表）」とのラベルが付いた\nノードのノードデータとして，「スライス数＝同一面数；」との代入\n用スクリプト，及び上記代入用スクリプトが値を求める変数である「ス\nライス数」が記載されている。そうすると，上記代入用スクリプトが\n値を求める「スライス数」を含む「当該ノードデータ」が，「MW70 巾\n木（表）」とのラベルが付いたノードのノードデータに該当すること\nは明らかであるから，本件明細書及び図面に基づいても，特定の一つ\nのノードデータを意味する構成要件Ｆの「当該ノードデータ」を，原\n告が主張する「複数のノードデータ」と解釈することはできない。\nなお，原告は，仮に，甲１発明において，代入用スクリプトと自ノ\nード変数データとが同じノードに含まれることが要件であるとしても，\n甲１には代入用スクリプトの開示があるとし，甲１の【図６】におけ\nる自ノード「内箱本体」には，結局のところ，\n「高さ」＝（「内箱本体の高さ」＝「自己の高さ」）；\nという，親ノード変数データの値「内箱本体の高さ」を，自ノード変\n数データ「高さ」に代入するための，代入用スクリプトが含まれてい\nると主張する。\nしかし，そもそも甲１の【図６】においては，「内箱本体」ノード\nにおける「高さ」は「入力属性」とされており，「決定属性」とはさ\nれていないのであるから，代入用スクリプトが含まれているものとは\n解し難いものであるし，「内箱」ノードと「内箱本体」ノードが実質\n的には同位で一体性の高いものであることを前提にその中に代入用ス\nクリプトが含まれていると解する場合には，前記ｂで示したとおり，\n上記代入用スクリプトが上位ノード変数データを利用するものではな\nいことが一段と明確になるものというべきであるから，いずれにして\nも原告の上記主張は結論を左右し得ない。\nｄ  以上によれば，いずれの点からみても，原告の主張は採用し得ない。\n(ウ)  まとめ\nそうすると，「甲１発明では，ノードデータに当該ノードデータに含\nまれる変数データである自ノード変数データと，当該ノードの直系上位\nノードのノードデータに含まれる変数データである上位ノード変数デー\nタを利用した演算を行って，前記自ノード変数データの値を求める代入\n用スクリプトが含まれることは特定されておらず，更に当該スクリプト\nを表示することも特定されていない点。」が，本件発明１と甲１発明の\n相違点となり，これは実質的なものであるから，結局本件発明１と甲１\n発明は，相違点２に対応する相違点を有することになる。\nそして，本件発明１４は，本件発明１を引用し，プログラムの発明と\nして特定したものであり，本件発明１と実質的に同じ構成を有するから，\n本件発明１と同様，甲１発明と実質的な相違点を有することになる。\n(3)  相違点３の認定の誤りについて\nア  原告は，甲１には，スクリプトの開示があり，また，文書ファイルに記\n載された自ノード属性値をスクリプトにより変更することも開示されて\nいるから，相違点３を実質的な相違点と認定した本件審決の判断は誤りで\nあると主張する。\nイ  しかし，甲１発明には代入用スクリプトの開示がないことは上記(2)の\nとおりであるし，甲１発明は，「「実行ステップ」において「ノードデー\nタに含まれる属性値の数式の計算」が行われ，計算されたノードデータに\n基づき「知識ベース」の更新が行われるものの，「情報評価ステップ」で\n「代入用スクリプト」の実行によって「自ノード変数データの更新」を行\nうものではない」から，いずれにしても原告の主張は採用し得ず，本件審\n決の相違点３の認定に誤りはなく，かつ，相違点３は実質的なものである。\nそして，本件発明１４は，本件発明１を引用し，プログラムの発明とし\nて特定したものであり，本件発明１と実質的に同じ構成を有するから，本\n件発明１と同様，甲１発明と実質的な相違点を有することになる。\n(4)  小括\nそうすると，本件発明１と甲１発明には相違点２及び相違点３に相当する\n相違点があり，かつ，これらは実質的なものである。\nしたがって，本件発明１は甲１に記載された発明ではなく，本件発明１が\n新規性を欠くということはできない。\n同様に，本件発明１の発明特定事項を全て含む本件発明１４は，甲１に記\n載された発明ではなく，本件発明１４が新規性を欠くということもできない。\nよって，本件審決の判断に誤りはない。\n３  取消事由２（甲１発明を主引用例とする進歩性判断の誤り）について\n⑴  原告は，本件発明１において，代入用スクリプトと自ノード変数データと\nが，同一のノードデータに含まれるのに対し，甲１発明ではそうではないこ\nとが相違点に当たるとした場合であっても，甲１発明において，直系上位ノ\nードに含まれている代入用スクリプトを，直系上位ノードではなく，自ノー\nドに含ませることとすることは，当業者の技術常識ないし周知技術に基づく\n設計事項であるから，当業者は，相違点２及び相違点３に係る構成を容易に\n想到することができると主張する。\nしかし，前記２において判示したとおり，甲１には，本件発明１の構成要\n件Ｆの代入用スクリプトに相当する事項自体が開示されていないから，原告\nが主張するように，単に代入用スクリプトを自ノードに含むか含まないかと\nいう点のみが相違点となるのではない。\nそして，甲１には，ノードデータに当該ノードデータに含まれる変数デー\nタである自ノード変数データと，当該ノードの直系上位ノードのノードデー\nタに含まれる変数データである上位ノード変数データを利用した演算を行っ\nて，前記自ノード変数データの値を求める代入用スクリプトが含まれるよう\nにする方法について記載も示唆もない。\nしたがって，その他の点について判断するまでもなく，当業者が，甲１発\n明において，「スクリプトは「当該ノードデータに含まれる変数データであ\nる自ノード変数データと，当該ノードの直系上位ノードのノードデータに含\nまれる変数データである上位ノード変数データを利用した演算を行って，前\n記自ノード変数データの値を求める代入用スクリプト」を含む」という相違\n点２に係る本件発明１の構成及び「前記代入用スクリプトの実行により，前\n記自ノード変数データの値を更新する」という相違点３に係る本件発明１の\n構成を容易に想到することができたとはいえない。\n同様に，当業者が，甲１発明において，本件発明１の発明特定事項を全て\n含む本件発明１４について，前記相違点２に係る本件発明１４の構成及び前\n記相違点３に係る本件発明１４の構成を容易に想到することができたとはい\nえない。\n(2)  小括\n以上によれば，相違点２及び相違点３についての容易想到性を否定した本\n件審決の判断に誤りはないから，原告主張の取消事由２は理由がない。\n４  取消事由３（実施可能要件違反）について\n⑴  原告は，本件発明１（構成要件Ｈ）に，文書ファイルに含まれる自ノード\n変数データの値を書き換えない態様が含まれることを前提に，本件明細書に，\n自ノード変数データの値を書き換えない態様の開示がないとして，実施可能\n要件違反を主張する。\nア  本件発明１の実施例では，表示画面（【図６】）がツリービューアとデ\nザインテーブルから構成される（【００４４】）。デザインテーブルは，\nツリービューアに表示されたノードのうち選択されたノードが有する情報\nを表示する領域であり，このうち操作ボタン表示領域２０ａには，デザイ\nンテーブルに関する各種操作を行うための操作ボタンが表示されている\n（【００４６】）。本件明細書の【図６】をみると，表示ボタンには，「更\n新」ボタンと「評価」ボタンが含まれ，２０ａに示された１０個の長方形\nのうち，左上が「更新」ボタンであり，上段の右から２つ目が「評価」ボ\nタンである。\n本件明細書の【００５８】には，「デザインテーブル２０の編集内容は，\n領域２０ａの更新ボタンを押すことによって，文書情報に反映される。」\nと記載されている。このように更新ボタンを押すのが，自ノード変数デー\nタを書き換える態様に当たると解される。\nイ  一方，代入用スクリプト及び生成用スクリプトは，操作ボタン表示領域\n２０ａの「評価」ボタンを押すことにより実行される（【００６７】）。\n代入用スクリプト及び生成用スクリプトの具体例をみると，本件明細書\nの【図９】に示すように，ターゲットノードは，要計算の公開変数として，\n「スライス数」と「色」を有しており，代入用スクリプトとして，「スラ\nイス数＝同一面数；」と「色＝ 同一面数」を有している。評価前は，同【図\n１０】に示すように，公開変数「スライス数」と「色」の値は空欄となっ\nている（【００７２】）。\nこの状態で，このノードを選択し，評価ボタンを押し，評価条件として\n代入用スクリプトの実行を設定すると，記憶された代入用スクリプトを実\n行する。したがって，公開変数「スライス数」の値は，上位ノードの公開\n変数である「同一面数」の値「１」となり，公開変数「色」の値は，同様\nに上位ノードの公開変数である「巾木色」の値「Ｆ－２０５」となる。代\n入用スクリプト実行後のデザインテーブルの公開変数表示領域２１の表示\n例が，同【図１３】である（【００７３】）。\nすなわち，本件明細書には，ノードを選択し，評価ボタンを押すことに\nより代入用スクリプトが実行され，デザインエリア２０の公開変数表示領\n域２１の表示が【図１０】から【図１３】に変化することが開示されてい\nるが，これは，更新ボタンを押さないと文書情報に反映されないので（【０\n０５８】），これが，自ノード変数データの値を書き換えない態様に当た\nると解される。\nウ  本件明細書には，文書情報に反映せずに代入用スクリプトを実行し，公\n開変数表示領域の表示を【図１０】から【図１３】のように変更する態様\nが明確に記載されており，当業者がこれを実装することに特に困難性はな\nいから，本件明細書の発明の詳細な説明の記載は実施可能要件に適合する\nものと解される。\n(2)  原告は，審判合議体は，本件発明が文書ファイルに含まれる自ノード変数\nデータの値を書き換えない態様を含むものであるか，それとも含まないもの\nであるかについて判断した上で，無効理由３についての結論を示すべきであ\nったと主張するが，本件審決は，本件発明１及び１４の構成要件ＡからＨの\n全てについて，その方法を実施するための具体的な記載が発明の詳細な説明\nにあるか，そのような記載がない場合には，本件明細書及び図面の記載及び\n出願時の技術常識に基づき，当業者が過度の試行錯誤や複雑高度な実験等を\n行う必要なく，その方法を実施することができる程度にその発明が記載され\nているかを検討しており，別個の手続である侵害訴訟において被告が主張し\nた具体的な態様が本件発明１及び１４に属することを前提とする判断を示さ\nなかったからといって不当とはいえないし，原告主張の前提において本件明\n細書を検討しても，実施可能要件に適合することは前記(1)のとおりである。\n⑶  小括\n以上によれば，本件発明１は実施可能要件に適合するものと認められ，本\n件発明１４も同様であるから，原告主張の取消事由３は理由がない。\n５  取消事由４（サポート要件違反）\n(1)  原告は，本件発明１は，被告の主張によれば，文書ファイルの内容を変更\nしない態様を含むものであるところ，本件明細書を参酌しても，文書ファイ\nルに含まれる自ノード変数データの値を書き換えることなく，どのようにし\nて情報の更新を行うのか，どのように多数の利用者間で更新した情報を共有\nし，再利用することができるのか全く明らかでないとしてサポート要件違反\nを主張する。\nしかし，前記４(1)のとおり，本件明細書には，文書情報に反映せずに代入\n用スクリプトを実行し，公開変数表示領域の表示を【図１０】から【図１３】\nのように変更する態様が明確に記載されており，当業者が本件発明１により，\nその課題を解決できるものと認識できるから，本件発明１はサポート要件に\n適合する。この点に関するその他の原告の主張については，原告は，別個の\n手続である侵害訴訟において被告が主張した具体的な態様が本件発明１及び\n１４に属することを前提とする判断を示さなかった点が不当である旨主張す\nるが，この主張が理由がないことは，前記４(2)において説示したところから\nも明らかである。\n(2)  小括\n以上によれば，本件発明１は，サポート要件に適合するものと認められ，\n本件発明１４も，これと同様であるから，原告主張の取消事由４は理由がな\nい。\n６  結論\n以上のとおり，原告主張の取消事由はいずれも理由がないから，本件審決を\n取り消すべき違法は認められない。\nしたがって，原告の請求を棄却することとして，主文のとおり判決する。\n知的財産高等裁判所第４部\n裁判長裁判官\n菅      野      雅      之\n裁判官\n本      吉      弘      行\n裁判官\n岡      山      忠      広\n（別紙１）\n１  【技術分野】\n【０００１】\n本発明は，コンピュータを用いて情報を管理する情報管理方法，情報管理プロ\nグラム，及び情報管理装置に関する。\n２  【背景技術】\n【０００２】\nコンピュータを用いて各種情報の管理を行う場合，それぞれの情報を記憶した\nファイル（文書ファイル，画像ファイル等）を，所定のフォルダに保管すること\nによって行うのが一般的である。しかし，作成したフォルダの構造及びそれぞれ\nのフォルダに保管するファイルの種類等は，任意であってフォルダの作成者に依\n存するため，作成者以外の者が必要な情報に適確にアクセスすることは，必ずし\nも簡単ではない。すなわち，多数の者が情報を共有化し，再利用できるように，\n情報管理を行うことは容易ではない。\n【０００３】\n特許文献１には，情報の共有化，再利用を効率よく実現することができる文書\n情報管理システムが記載されている。この文書情報管理システムは，案件（プロ\nジェクト）毎にツリーを作成して表示し，作成した文書ファイルを，表示された\nツリーの任意のノードに付随させて，サーバコンピュータに保管するものである。\n【０００４】\nまた，異なる計算機やアプリケーションで共通に取扱うことができるデータ形\n式として，ＸＭＬ（Extensible Markup Language）等の構造化文書規格があるが，\n特許文献２には，このような構造化文書を木構造として捉えて処理する構造化文\n書処理システムが記載されている。\n【０００５】\nしかし，管理される各種情報の更新については，上記した管理システムにおい\nても，効率化が十分図られているとはいえない。すなわち，木構造のノードに含\nまれる情報は，相互に関連するものが多いが，上記した管理システムにおいては，\nそれぞれの文書の該当する部分を個別に更新する必要があり，十分効率的とはい\nえない。\n【０００６】\n【特許文献１】特開２００２－２０７７７２号公報\n【特許文献２】特開２００３－１７８０４９号公報\n【発明の開示】\n３  【発明が解決しようとする課題】\n【０００７】\n本発明は，上記事情に鑑みなされたもので，管理すべき情報の更新を，簡単か\nつ効率的に行うことができる情報管理情報を提供することを目的とする。\n４  【課題を解決するための手段】\n【０００８】\n本発明の情報管理方法は，コンピュータが情報を管理する情報管理方法であっ\nて，前記コンピュータに複数のノードそれぞれに対応付けて入力された管理すべ\nき情報を，前記ノードを識別するノード識別情報に対応付けられた複数のノード\nデータを含む文書ファイルとして前記コンピュータが記憶する情報記憶ステッ\nプと，前記情報記憶ステップで記憶された前記文書ファイルの情報を前記コンピ\nュータが表示する情報表示ステップと，前記ノードデータに含まれるスクリプト\nを前記コンピュータが実行する情報評価ステップとを備え，前記ノードデータは，\nルートノードを除いて，当該ノードの親ノードを特定する親ノード識別情報を含\nんでおり，前記スクリプトは，当該ノードデータに含まれる変数データである自\nノード変数データと，当該ノードの直系上位ノードのノードデータに含まれる変\n数データである上位ノード変数データを利用した演算を行って，前記自ノード変\n数データの値を求める代入用スクリプトを含んでおり，前記情報表示ステップは，\n前記親ノード識別情報を利用して，前記ノードの木構造を表示する木構造表示ス\nテップと，前記表示された木構造のノードのうちの選択されたノードの前記自ノ\nード変数データ，前記上位ノード変数データ及び前記スクリプトを表示するノー\nドデータテーブル表示ステップを含み，前記情報評価ステップは，前記代入用ス\nクリプトの実行により，前記自ノード変数データの値を更新するステップを含む\nものである。\n【０００９】\n本発明によれば，利用者が入力したデータに含まれるスクリプトを利用して，\nノードデータを更新することができるので，管理すべき情報の更新を，簡単かつ\n効率的に行うことができる。また，複数のノードデータを含む１つの文書データ\nを用いて，個々の業務や案件に関する情報を管理しているので，多数の利用者に\nよる情報の共有化，再利用を，簡単かつ効率的に行うことができるとともに，文\n書データに基づいて，簡単にノードの木構造を表示させることができ，業務や案\n件全体の把握を簡単に行うことができる。さらに，表示された木構造の個々のノ\nードに対応付けられた詳細情報を簡単に表示することができる。\n【００１０】\n本発明の情報管理方法は，前記木構造表示ステップが，前記ノードを示すノー\nドラベルと，前記親ノードの前記ノードラベルとの間を接続する階層リードとの\n表示を含むものを含む。本発明によれば，ノードの階層関係を容易に識別するこ\nとができる。\n【００１１】\n本発明の情報管理方法は，前記情報評価ステップが，前記表示された木構造の\nノードのうちの選択されたノードの前記代入用スクリプトを実行するに際して，\n前記選択されたノードの直系下位ノードの前記代入用スクリプトを合わせて実\n行するものを含む。本発明によれば，関連するノードの評価を同時に行うことが\nできる。また，上位ノードの変数値を変更した時の，下位ノードの変数値を簡単\nに出力することができるので，シミュレーション動作を簡単に行うことができる。\n【００１５】\n本発明の情報管理方法は，前記ノードデータテーブル表示ステップが，当該ノ\nードの直系下位ノードの前記スクリプトでも利用される公開変数と，当該ノード\nの前記スクリプトでのみ利用される限定変数を含むものを含む。本発明によれば，\n必要な変数データのみを下位ノードに継承させることができる。\n【００１６】\n本発明の情報管理方法は，前記ノードデータテーブル表示ステップが，前記公\n開変数の表示に際して，前記自ノード変数データと前記上位ノード変数データと\nを区別して認識可能な態様で表示するものを含む。本発明によれば，自ノードの\n変数の入力及び確認，スクリプトの作成を容易に行うことができる。\n【００１７】\n本発明の情報管理方法は，前記情報記憶ステップで記憶される文書が，前記コ\nンピュータに入力された参照元ノードと参照先ノードとの関連を示す参照情報\nを含んでおり，前記参照元ノードの前記代入用スクリプトは，前記自ノード変数\nデータと前記上位ノード変数データに加えて，前記参照情報によって特定される\n前記参照先ノードの変数データを利用した演算を行って，前記自ノード変数デー\nタの値を求めるものであるものを含む。本発明によれば，参照先ノードの変数デ\nータを一次的な変数として利用することができ，代入用スクリプトの演算機能を\n拡張することができる。\n【００１８】\n本発明の情報管理方法は，前記木構造表示ステップが，前記参照元ノードと前\n記参照先ノードとを接続するリードを選択的に表示するものであるものを含む。\n本発明によれば，参照先の有無，及び参照先ノードを簡単に確認することができ\nる。\n【００１９】\n本発明の情報管理方法は，前記ノードデータテーブル表示ステップが，前記参\n照先ノードの変数データを合わせて表示するものであるものを含む。本発明によ\nれば，代入用スクリプトに利用される変数データの確認を確実に行うことができ，\n代入スクリプトの作成及び確認が容易になる。\n【００２２】\n本発明の情報管理プログラムは，上記した情報管理方法における各ステップを，\nコンピュータに実行させるための情報管理プログラムである。\n【００２３】\n本発明の情報管理装置は，上記した情報管理プログラムをインストールしたコ\nンピュータを含むものである。\n５  【発明の効果】\n【００２４】\n以上の説明から明らかなように，本発明によれば，管理すべき情報の更新を，\n簡単かつ効率的に行うことができる。\n６  【発明を実施するための最良の形態】\n【００２５】\n以下，本発明の実施の形態について，図面を用いて説明する。\n【００２６】\n本発明の情報管理方法及び情報管理装置は，所定の情報管理プログラムをイン\nストールしたコンピュータを用いて実施する。ここで利用されるコンピュータは，\nスタンドアローン型のものでもよいし，クライアント－サーバ型のものでもよい。\n【００２７】\nコンピュータにインストールする情報管理プログラムは，管理すべき情報をノ\nードに対応付けて入力する情報入力ステップ，情報入力ステップで入力されたデ\nータを，各ノードを識別するノード識別情報に対応付けられた複数のノードデー\nタを含む文書として記憶する情報記憶ステップ，情報記憶ステップで記憶された\n文書の情報を表示する情報表示ステップ，及びノードデータに含まれるスクリプ\nトを実行する情報評価ステップを実行するためのプログラムを含んでいる。\n【００２８】\n図１に，ノードデータとして記憶される情報の一例を示す。記憶される情報は，\nノード番号，ページ番号，親ノード番号，ノードラベル，ノード表示属性情報，\n変数情報，代入用スクリプト，生成用スクリプト，リンク情報を含む。\n【００２９】\nノード番号は，ノードを識別する情報であり，ノード生成時に自動的に一意の\n番号が付与される。ページ番号は，文書に含まれるノードを複数の木構造として\n表示するためのもので，そのノードが所属するページを識別する所属ページ番号\nに，そのノードが別のページを形成する場合にそのページを識別する自己ページ\n番号を含む。したがって，両方のページ番号が記憶されているノードは，２つの\nページに属することになる。親ノード番号は，そのノードの親ノードを識別する\n番号であり，ノード生成時に親ノードを指定することにより，その指定された親\nノードのノード番号が自動的に記憶される。\n【００３０】\nノードラベルは，木構造表示時にそのノードを示す情報であり，ノード名称等\n任意の情報を記憶することができる。ノード表示属性情報は，ノード表示時の背\n景，文字の色，フォント等の文字属性，枠の形状，大きさ等の枠属性等を指定す\nる情報である。ここで，ＪＰＧ画像等をノードに表示したい場合は，その画像フ\nァイルの場所を指定するＵＲＬ等が記憶される。\n【００３１】\n変数情報は，各ノードが保持するデータであって，変数名に対応させて記憶さ\nれる。記憶される変数は，下位ノードから参照される公開変数と，自ノード内で\nのみ使用する限定変数を含む。また，変数の値（ 「変数データ」と記述する場合\nもある。） は，固定値が設定されても，スクリプトの実行によって演算された値\nが設定されてもよい。また，ＵＲＬが設定されてもよい。どのような値が設定さ\nれるかは任意である。\n【００３２】\n代入用スクリプトは，自ノードの変数の値を演算するためのものである。代入\n用スクリプトは，自ノードの変数の値である自ノード変数データと，そのノード\nの直系上位ノードの公開変数の値である上位ノード変数データを利用して記述\nすることが可能である。\n【００３３】\n生成用スクリプトは，辞書に登録してある別のノードやノード群（木構造の複\n数ノード） を利用して，新規にそのノードの下位のノードを生成するものである。\n生成用スクリプトを条件文と併用することにより，代入用スクリプトの実行によ\nり求められた変数データの結果によって，子ノードや孫ノードを生成することが\nできる。生成用スクリプトを利用することにより，例えば，部品管理を行う場合，\n親部品のサイズによって子部品が変わるケースの子部品のデータを簡単に生成\nすることができる。\n【００３４】\nなお，代入用スクリプト及び生成用スクリプトに使用する言語としては，スク\nリプト言語として使用されている任意の言語を使用することができる。\n【００３５】\nリンク情報は，各ノードにリンクするファイルに関する情報である。スタンド\nアローン型のコンピュータで実施する場合，この情報はリンクファイルのインデ\nックス情報である。また，クライアント－サーバ型のコンピュータで実施する場\n合，リンクファイルをサーバに転送後，インデックス情報を作成し，記憶する。\nリンク情報を記憶することにより，各ノードをフォルダとして利用することが可\n能となる。\n【００３６】\nノードデータは，例えばタグ付き文書情報として記憶される。図２に，ノード\nデータの一例を示す。図２のデータは，ルートノードのノードデータの例であり，\nノード番号（nodeNo）が「3450」，自己ページ番号（ownPageNo）が「10」，ノー\nドラベル(label)が「パッセル操作マニュアル」である。所属ページ番号を示す\n（belongPageNo）が「0」，親ノード番号を示す（parentNodeNo）が「0」である\nことで，ルートノードであることを示している。図２の「x =”100”」から「color\n=”0”」までは，ノードの表示位置等のノード表示属性情報である。\n【００３７】\nこの形式では，変数情報が，「<DataDivision>」と「</DataDivision>」の間に\n挿入され，代入用ス クリプトが，「 <ProcesureDivision> 」と「 </Procesure\nDivision>」の間に挿入され，生成用スクリプトが，「<GenerateDivision>」と「</\nGenerateDivision>」の間に，リンク情報が，「<LinkageDivision>」と「</<Linkage\nDivision>」の間に挿入される。ただし，図２の例では，変数情報，代入用スクリ\nプト，生成用スクリプトは，記憶されていない。\n【００３８】\n図３に，ノードデータの別の例を示す。図３のデータは，ルートノード以外の\nノードデータの例である。所属ページ番号が「3484」，親ノード番号が「3488」\nとなっており，ルートノード以外のノードのノードデータであることが把握でき\nる。また，自己ページ番号が「3526」となっていることから，別ページの木構造\nの先頭ノードであることも把握できる。\n【００３９】\n図４に，管理すべきデータを複数のノードデータを含む文書情報として記憶さ\nせたものの一例を示す。図４の文書は，ヘッダ部４０，ノードデータ部４１ａ～\n４１ｎ，ライン部４２，レポート部４３を備える。\n【００４０】\nヘッダ部４０は，管理される案件等を指すプロジェクトのプロジェクト番号，\n名称（プロジェクト名）等を示す情報を含んでいる。図４の例では，プロジェク\nト名が「Manual ver2」，プロジェクト番号が「10」であることを示している。\n【００４１】\nノードデータ部４１ａは，ルートノードのノードデータを示し，ノードデータ\n部４１ｂ～４１ｎは，ルートノード以外のノードのノードデータである。\n【００４２】\nライン部４２は，ノード間を接続するリードを定義する情報が記憶される領域\nである。ノード間を接続するリードは，親子のノード間を接続する階層リードと，\n階層関係とは無関係に一時的に変数を参照する参照元ノードと参照先ノード間\nを接続する参照リードがあるが，ライン部４２は，参照リードの存在及び，位置，\n表示属性等を規定する。\n【００４３】\n次に，記憶された文書情報の表示について説明する。図５に，文書情報の表示\nを行う場合の概略動作フローを示し，図４に示す文書の表示を行った場合の表示\n画面の例を図６に示す。\n【００４４】\n図６の表示画面は，ツリービューア１０とデザインテーブル２０を有する。ツ\nリービューア１０は，ノードの木構造を表示する領域であり，情報管理時の各種\n操作を行うためのプルダウンメニュー，及びポップアップメニューを表示する領\n域も兼ねる。ノードの木構造の表示は，ラベルとリードの表示によって行い，図\n６の例では，ルートノードのラベル表示１１ａとルートノード以外のノードのラ\nベル表示１１ｂ，１１ｃ，１１ｄと，それらの間を接続する階層リード１２ｂ，\n１２ｃ，１２ｄが表示されている。\n【００４５】\nラベル表示１１ａ～１１ｄは，ノード表示属性情報に基づいて表示されるが，\nルートノードのラベル表示１１ａには，ルートノードであることを示すマーク１\n３ａが付加される。また，ルートノード以外のノードで自己ページ番号を有する\nノードは，その旨を示すマーク１４ｂ，１４ｄが付加される。マーク１４ｂ，１\n４ｄが付加されていることで，別ページの木構造が存在することを簡単に認識す\nることができる。\n【００４６】\nデザインテーブル２０は，ツリービューア１０に表示されたノードのうちの選\n択されたノードが有する情報を表示する領域であり，公開変数表示領域２１，限\n定変数表示領域２２，代入用スクリプト表示領域２３，生成用スクリプト表示領\n域２４，操作ボタン表示領域２１ａ，２２ａ，２０ａを有する。操作ボタン表示\n領域２１ａの各操作ボタンは，公開変数に対する各種操作を行うためのものであ\nり，操作ボタン表示領域２２ａの各操作ボタンは，限定変数に対する各種操作を\n行うためのものである。また，操作ボタン表示領域２０ａの各操作ボタンは，デ\nザインテーブル２０に関する各種操作を行うためのものである。\n【００４７】\nプロジェクト毎に作成された文書ファイルを選択し，開くと，図５に示す手順\nで表示処理が行われる。ステップＳ１０１では，文書データからルートノードを\n認識する。既述のように，ルートノードのノードデータは，所属ページ番号及び\n親ページ番号が「０」であるので，そのようなノードを探すことにより，ルート\nノードを認識することができる。なお，文書番号を一義的に割り当て，ルートノ\nードの自己ページ番号を文書番号と一致させておくと，ルートノードの認識がさ\nらに簡単になる。\n【００４８】\nステップＳ１０２では，認識したルートノードの自己ノード番号を認識し，ス\nテップＳ１０３では，認識したページ番号のページに属するノードを認識する。\nすなわち，ルートノードの自己ページ番号を所属ページ番号として有するノード\nを認識する。\n【００４９】\n次いで，ステップＳ１０３で認識したノードのラベル表示を行う（ ステップＳ\n１０４）。ラベル表示は，そのノードのノードラベル及びノード表示属性情報に\n基づいて表示する。そして，表示したノードの親子関係に基づいて階層リードを\n表示し，さらに，文書のライン部４２の情報を参考にして，参照リードを表示す\nる（ステップＳ１０５） 。\n【００５０】\nこの状態では，ツリービューア１０に木構造が表示された状態である。ステッ\nプＳ１０６では，ツリービューア１０に表示されたノードが選択されたかどうか\nを判定し，選択されている場合，デザインテーブル２０の表示を行い（ステップ\nＳ１０７） ，そのノードの変数，スクリプト等を表示する（ ステップＳ １０８）。\n図６は，ルートノードを選択した場合の例であり，ルートノードには，変数情報\n等が記憶されていないので，デザインテーブル２０に，データの表示はない。こ\nの状態で，別のノードを選択すると，そのノードの変数等が表示される。\n【００５１】\n記憶された変数の値が，ＵＲＬ又はファイルパスである場合は，その変数を選\n択した状態で領域２１ａ，２２ａの「実行」ボタンをおすことにより，そのＵＲ\nＬ又はファイルパスの内容を表示する。\n【００５２】\nデザインテーブル２０は，ノードを選択することで表示されるが，各ノードの\nリンク情報，及びノードレポートの表示は，ノード選択後メニューを表示させて\n行う。リンク情報表示が指示されると，そのノードのノードデータのリンク情報\nのリストを別ウィンドウで表示する。リンク情報が記憶されていない場合は，リ\nストが空欄である。表示されたリストの中のファイルが選択されると，そのファ\nイルの内容に応じた情報の表示を行う。ノードレポート表示が指示されると，別\nウィンドウに表示するとともに，レポート領域４３を参照し，該当ノードの情報\nが記憶されている場合には，その情報を表示した別のウィンドウに表示する。\n【００５３】\nノードのリンク情報，及びノードレポートは，リンク情報のリスト，あるいは\nレポート表示ウィンドウを表示した状態で，追加，削除を行うことができる。\n【００５４】\n図６に示した状態で，表示された木構造及びノードデータの編集が可能であり，\n編集操作に対応した表示を行う（ステップＳ１０９）。ツリービューア１０上で\nは，ノードの追加，削除，表示位置移動，表示属性変更，ノードラベル変更等を，\nプルダウンメニュー，ポップアップメニューの設定により行う。例えば，表示位\n置の変更は，ラベル表示をドラッグすることによって行い，ノードラベル及び表\n示属性の変更は，変更用のウィンドウを表示させて行う。また，ノードの削除は，\n削除したいノードを選択した状態で，メニューを表示させて削除する。ノードの\n追加は，メニューで追加モードに設定後，追加したいノードの親となるノードを\n選択し，そのままドラッグすることにより，新規ノードを生成する。また，ノー\nドの繋ぎ換えは，繋ぎ換えたいノードを選択し，メニューを表示させて「ノード\n繋ぎ換え」を選択し，変更したい繋ぎ先のノード（親ノードとしたいノード）を\n選択することによって行う。生成されたノードのノードラベル，表示属性情報は，\n修正用のウィンドウを表示させて設定する。\n【００５５】\nそれぞれのノードに関するデータは，ノードデータとして１まとまりになって\nいるので，これらの編集を行った場合でも，編集を行ったノードのノードデータ\nに反映させるだけでよく，軽い処理負担で編集作業を行うことができる。\n【００５６】\nデザインテーブルの情報を追加，修正する場合は，領域２１ａ ，２２ａ ，２\n０ａの該当するボタンを押すことによって行う。変数の追加は，領域２ １ａ又は\n２２ａ「追加」ボタンを押して，新規の変数を生成し，変数名，値，修飾情報を\n入力する。変数の入力は，別ウィンドウで入力フォームを表示させて行ってもよ\nい。\n【００５７】\n代入用スクリプト及び生成用スクリプトは，公開変数領域２１および限定変数\n領域２２に表示された変数を利用して作成する。公開変数領域２１には，自ノー\nドの公開変数だけでなく，直系上位のすべてのノードの公開変数が表示される。\n直系上位のノード以外のノードの変数を参照したい場合は，参照リードを生成し\nて，参照先のノードと関連付けておく。代入用スクリプト及び生成用スクリプト\nは代入用スクリプト領域２３及び生成用スクリプト領域２４に直接入力しても\nよいし，別のウィンドウを開いて入力するようにしてもよい。\n【００５８】\nなお，デザインテーブル２０の編集内容は，領域２０ａの更新ボタンを押すこ\nとによって，文書情報に反映される。\n【００５９】\n続いて，ステップＳ１１０では，表示終了，すなわち文書クローズが指示され\nたかどうかを判定し，表示終了が支持されていない場合は，階層移動指示がされ\nているか否かを判定する（ステップＳ１１１）。階層移動は，マーク１４ｂ，１\n４ｄ等別の木構造の先頭ノードとなるノードを選択した状態で，ポップアップメ\nニューから指示する。\n【００６０】\n階層移動が指示されていると判定した場合，ステップＳ１１２で別ページの木\n構造を表示する。木構造の表示は，表示すべきページ番号を認識後，ステップＳ\n１０３～ステップＳ１０５の処理と同様の処理を行う。木構造の先頭でないノー\nドに対して階層移動が指示される（階層を降りる旨の指示）と，そのノードを先\n頭とするノードを表示する。その時のページ番号は，そのノードの自己ページ番\n号である。木構造の先頭ノードを選択して階層移動を指示すると，そのノードの\n所属ページ番号が示すページの木構造を表示する。\n【００６１】\n別ページの木構造についても，ノードの追加，削除は同様に行うことができる。\nまた，特定のノードを先頭ノードとする新規の木構造を作成する場合は，先頭と\nなるノードを選択し，メニューから別ページ生成を指示する。そして，別ページ\nに表示された先頭ノードに，下位ノードを追加して，木構造とする。\n【００６２】\n次に，新規プロジェクトの作成について，図７を用いて説明する。図示しない\nプロジェクトツリーを表示させ，新規プロジェクトの作成が指示されると，新規\nプロジェクト作成用のダイアログボックスを表示する（ステップＳ ２０１） 。\n次いで，ダイアログボックスを介して少なくとも新規プロジェクトのプロジェク\nト名が入力されると（ステップＳ２０２），ツリービューア１０にルートノード\nのラベル表示を行う（ステップＳ２０３）。次いで，ルートノードのノードデー\nタを入力する（ステップＳ２０４）。そして，ルートノードに下位ノードを順次\n追加し，ノードデータを入力する（ステップＳ ２０５）。ノードデータの入力，\n及びノードの追加は，図６で説明した編集処理と同様の手順で行う。\n【００６３】\n続いて，ノードデータに含まれる変数情報，代入用スクリプト，生成用スクリ\nプトについて，部品管理を例に説明する。図８は，部品管理に適用した場合の木\n構造の一例を示す図である。図８の木構造は，製品番号「990070」，品名「ＭＷ\n－７０」の製品の部品管理に適用したもので，製品は，「fore」，「center」，\n「bone」，「back」の部分からなり，さらにそれぞれの部分が，複数の部品から\n構成されることを示している。ただし，図８では，部分「fore」の部品のみを記\n載し，他の部分については，省略してある。\n【００６４】\n図８から明らかなように，部分「fore」は，３つの「ＭＷ70 巾木(表)」と３つ\nの「ＭＷ70 パネル(表)」から構成される。図９に，１つの部品「Ｍ Ｗ7 巾木(表)」\nに対応するノード（図８では，便宜的に右肩に「＊」を付してある。）のノード\nデータの一部を示し，図１０に，そのノードが選択された場合の公開変数表示領\n域２１の表示例を，図１１に，限定変数表示領域の表示例を示す。\n【００６５】\n公開変数表示領域に表示される公開変数は，自ノードの公開変数５１と，直系\n上位ノードの公開変数５２を含み，直系上位のノードの公開変数５２ は，自ノー\nドの公開変数５１と異なる色で表示される（図１０では，フォントを変えて示し\nてある。）。また，公開変数には，固定値が入力される公開変数と，代入用スク\nリプトの実行によって計算される公開変数があり，修飾領域に「なし」あるいは\n「要計算」を表示することによりに区別される。\n【００６６】\n要計算の公開変数の値は，後述するように代入用スクリプトが実行されるまで\nは空欄であり，図９及び図１０は，代入用スクリプト実行前の状態を示している。\nなお，直系上位ノードに要計算の公開変数が含まれ，その公開変数の値が代入ス\nクリプトの実行前で定まっていない場合，その公開変数は，下位ノードの公開変\n数領域２１に表示されない。すなわち，他のノードからの参照が一時停止される。\n【００６７】\n代入用スクリプト及び生成用スクリプトは，操作ボタン表示領域２０ａ の「評\n価」ボタンを押すことにより実行される。図１２に，スクリプト実行時の概略動\n作フローを示す。スクリプトを実行したいターゲットのノード選択し，「評価」\nボタンが押されると，評価条件設定用のダイアログボックスを表示する（ステッ\nプＳ ３０１）。このダイアログボックスでは，評価対象スクリプトの種類と，評\n価階層が少なくとも可能となっている。すなわち，代入用スクリプトのみの実行，\n生成用スクリプトの実行，両スクリプトの実行の設定と，自ノードのみを評価す\nるか直系下位ノードの指定階層まで評価するかを設定する。\n【００６８】\nステップＳ３０２では，ダイアログボックスの設定内容にしたがって，評価条\n件を認識する。そして，代入用スクリプトの実行が設定されているかどうかを判\n断し（ステップＳ３０３），設定されている場合は，代入用スクリプトを実行す\nる（ステップＳ３０４） 。\n【００６９】\n代入用スクリプトの実行が終了した後，及び代入用スクリプトの実行が設定さ\nれていない場合は，生成用スクリプトの実行が設定されているかどうかを判断す\nる（ステップＳ３０６）。そして，生成スクリプトの実行が設定されている場合\nは，その生成用スクリプトを実行する。\n【００７０】\n生成用スクリプトの実行が終了した後，及び生成用スクリプトの実行が設定さ\nれていない場合は，ノードデータを参照して，直系下位のノードに評価対象ノー\nドがあるかどうかを判断する（ステップＳ３０７）。ここで，判断対象となるノ\nードには，生成用スクリプトの実行によって生成されたノードも含まれる。\n【００７１】\nステップＳ３０７で，スクリプトを実行すべきノードが残っていると判断され\nた場合は，ステップＳ３０３に戻り，下位のノードについて同様の判断を行い，\nスクリプトの実行を行う。\n【００７２】\n次に，代入用スクリプト及び生成用スクリプトの具体例を，図８の「＊」を付\nしたノードをターゲットノードとして説明する。図９に示すように，ターゲット\nノードは，要計算の公開変数として，「スライス数」と「色」を有しており，代\n入用スクリプトとして，「スライス数＝同一面数；」と「色＝同一面数」を有し\nている。評価前は，図１０に示すように，公開変数「スライス数」と「色」の値\nは空欄となっている。\n【００７３】\nこの状態で，このノードを選択し，「評価ボタン」を押し，評価条件として代\n入用スクリプトの実行を設定すると，記憶された代入用スクリプトを実行する。\nしたがって，公開変数「スライス数」の値は，上位ノードの公開変数である「同\n一面数」の値「１」となり，公開変数「色」の値は，同様に上位ノードの公開変\n数である「巾木色」の値「Ｆ－２０５」となる。代入用スクリプト実行後のデザ\nインテーブルの公開変数表示領域２１の表示例を，図１３に示す。\n【図１】\n【図２】\n【図３】\n【図４】\n【図５】\n【図６】\n【図７】\n【図８】\n【図９】\n【図１０】\n【図１１】\n【図１２】\n【図１３】\n（別紙２）\n１  【０００１】\n【産業上の利用分野】本発明は，知識所有者自身が知識ベース構築者となって操\n作することが可能な知識ベース構築システムに関するものである。\n２  【０００２】\n【従来の技術】知識ベースは，所定の知識記述言語で記述された一種のコンピュ\nータプログラムであって，知識ベースを構築する際には，知識記述言語について\nの知識や経験が必要である。そこで，従来は図７に示す如く，知識ベース(１)に\n接続した知識ベース構築装置(13)は，知識記述言語についての知識や経験を有す\nるシステム開発者(14)が操作する運用形態を採っている。\n【０００３】システム開発者(14)は，知識ベース構築に際して知識所有者(15)と\nの口頭でのインタビューを行なって，知識所有者(15)から知識を獲得する。更に\nシステム開発者(14)は，獲得した知識に基づいて資料を作成し，知識を体系化す\nる。そして，該資料に基づいて，知識ベース構築装置(13)を操作し，知識ベース\n(１)を構築するのである。\n３  【０００４】\n【発明が解決しようとする課題】ところが，従来の知識ベース構築方法では，イ\nンタビューは口頭で行なわれるから，一度のインタビューでの完全な知識獲得は\n困難であり，特に大規模なシステムの構築においては，口頭のインタビューでは\n完全な知識獲得は不可能に近い。この結果，知識ベース(１)を一旦構築した後も，\n知識の追加や修正が必要となる。\n【０００５】又，知識を体系化するプロセスでは，資料作成のために多大な労力\nと時間を要する問題がある。\n【０００６】更に，知識所有者(15)の知識は，知識体系化の際に作成された資料\nと知識ベース(１)内に記述された知識とによって保存され，管理されているから，\n知識を追加し，或いは修正する必要が生じた場合には，システム開発者(14)が再\n度，知識所有者(15)とのインタビューを行なって，知識の獲得，体系化，及び知\n識ベース構築のプロセスを繰り返さねばならず，一連の処理が極めて煩雑となる\n問題がある。\n【０００７】本発明の目的は，知識ベースと知識ベース構築者の間に，知識所有\n者自身が操作可能なユーザインターフェースを設けることによって，知識ベース\n構築者自身が知識ベースを容易に構築することが出来る知識ベース構築システ\nムを提供することである。\n４  【０００８】\n【課題を解決する為の手段】本発明に係る知識ベース構築システムは，複数のノ\nードを互いに関係づけてなる階層構造を有して各ノードには詳細な知識が定義\nされるデータ構造のデータベース(４)と，該データベース(４)内のデータを前記\n知識記述言語に変換して知識ベース(１)に記述するデータ変換装置(３)と，デー\nタベース(４)内に知識の階層構造を定義するための階層構造定義装置(５)と，デ\nータベース(４)内に定義された階層構造の各ノードに対して詳細な知識を定義\nするための詳細知識定義装置(６)とを具えている。\n５  【０００９】\n【作用】階層構造定義装置(５)及び詳細知識定義装置(６)は，例えばキーボード，\nマウス等の入力操作によってデータ入力が可能であり，階層構造定義装置(５)の\nデータ入力操作によって，データベース(４)内に知識の階層構造のみが定義され，\n階層構造定義装置(５)のデータ入力操作によって，データベース(４)内に定義さ\nれた階層構造の各ノードに対して詳細な知識が定義される。\n【００１０】この際，データベース(４)のデータ構造は，知識ベース(１)の知識\n記述言語に比べて，人間の言語に近い形で表現することが可能であるため，知識\n所有者自身が階層構造定義装置(５)及び詳細知識定義装置(６)を操作して，自己\nの知識をデータベース(４)に容易に登録することが出来る。\n【００１１】データベース(４)内に階層構造にて登録された知識は，データ変換\n装置(３)により知識ベース(１)の知識記述言語に変換され，知識ベース(１)に記\n述される。\n【００１２】\n【発明の効果】本発明に係る知識ベース構築システムは，知識所有者自身が知識\nベース構築者となって操作することが出来るから，従来の知識ベース構築者によ\nる知識獲得プロセスは不要となる。又，知識の体系化は自動的に行なわれ，その\n結果が全てデータベースに登録されるから，知識の統一的な保存，管理が可能で\nある。従って，知識ベースの知識を変更する必要が生じた場合にも，データベー\nスを修正する処理だけで済む。\n６  【００１３】\n【実施例】以下，本発明の一実施例につき，図面に沿って詳述する。図１に示す\n如く知識ベース構築システム(２)は，知識ベース(１)と知識ベース構築者(８)の\n間に介在して，ユーザインターフェースの役割を果すものである。\n【００１４】知識ベース構築システム(２)は，複数のノードを互いに関係づけて\nなる階層構造を有して各ノードには詳細な知識が定義されるデータ構造のデー\nタベース(４)と，該データベース(４)内のデータと前記知識記述言語の間の双方\n向の変換を行なうデータ変換装置(３)と，データベース(４)内に知識の階層構造\nを定義するための階層構造定義装置(５)と，データベース(４)内に定義された階\n層構造の各ノードに対して詳細な知識を定義するための詳細知識定義装置(６)\nと，詳細知識の定義の際に他のノード或いは他の知識ベースの知識を参照するた\nめの知識参照装置(７)とから構成され，階層構造定義装置(５)，詳細知識定義装\n置(６)及び知識参照装置(７)は夫々，知識ベース構築者(８)によるデータ入力操\n作が容易な構成となっている。\n【００１５】例えば，ある製品設計に関する知識ベースを作成する場合，先ず階\n層構造定義装置(５)の操作によって，その製品の部品構成ツリーが作成される。\nここで，階層構造定義装置(５)による処理は，図２に示す如くノード名称の定義\n(Ｓ１)と階層構造の定義(Ｓ２)から構成される。\n【００１６】即ち，ノード名称の定義においては，図示の如く製品を構成する複\n数の部品の夫々にノード名称(Ａ～Ｇ)が付与される(Ｓ１)。この段階では，各ノ\nードは相互に関連なく独立しており，例えば図示するイメージにて画面表示され\nる。\n【００１７】その後，階層構造の定義においては，例えば画面に表示された各ノ\nードをマウスの操作等によってツリー状に連結することにより，図示の如く相互\nの親子関係が定義されることになる(Ｓ２)。\n【００１８】この結果，図１のデータベース(４)内には，各ノードの親子関係，\n即ち自己の名称，自己の親ノードの名称及び子ノードの名称が記述される。\n【００１９】次に，部品構成ツリー上の各ノード，即ち部品や部位についての知\n識が詳細知識定義装置(６)によって定義される。この作業は階層構造の下位から\n上位へ向かってノード毎に行なわれ，各ノード毎に図３に示す処理が実行される。\n【００２０】先ず，１つのノードが選択され(Ｓ３)，選択されたノードについて，\n必要な属性の定義(Ｓ４)，属性の分類(Ｓ５)，及び属性値の定義(Ｓ６)が行なわ\nれる。必要な属性の定義(Ｓ４)の際には，部品の“高さ”，“幅”，“長さ”，\n“色”，“材質”等の属性名のみが定義され，これらの属性名が図示の如く各ノ\nードに付加される。\n【００２１】属性の分類(Ｓ５)においては，定義された属性の性質に応じて，入\n力属性と決定属性に分類される。ここで，入力属性は，自己の親ノードからその\n属性値を入力すべき属性(例えば“高さ”，“幅”，“長さ”)であり，決定属性\nは，自己のノードにて属性値を決定すべき属性(例えば“色”，“材質”)である。\nこれによって，データベースには図示のイメージのデータ構造が形成される。\n【００２２】属性値の定義(Ｓ６)では，決定属性に分類された属性に対して属性\n値(“黒”，“スチール”)の入力が行なわれる。ここで，属性値としては，数値\nに限らず，数式や条件分岐が入力可能である。\n【００２３】上記の処理(Ｓ３～Ｓ６)が最上位のノードに至るまで繰り返される。\nこの結果，全てのノードについて，図３のステップＳ６に示す如きイメージのデ\nータ構造が形成される。ここで，最上位のノードに入力属性として定義されてい\nる属性名が，知識ベース運用の際にデータを入力すべき項目であり，該データ入\n力によって知識ベースが動作を開始することになる。\n【００２４】上記の詳細知識定義装置(６)の操作の過程で，他の部品或いは他の\n製品の知識を参照する必要が生じたときは，知識参照装置(７)を用いて，他のノ\nード或いは他の知識ベースを参照することが可能である。詳細知識定義装置(６)\nは，他のノードの知識を検索してその結果を報知する処理と，他のノードの知識\nを提示し或いはその知識の流用を許可する処理の２つの機能を有している。\n【００２５】上記の処理によってデータベース(４)の登録が終了した後，その旨\nを知識ベース構築システム(２)にデータ入力すれば，データ変換装置(３)がデー\nタベース(４)内のデータを自動的に所定の知識記述言語に変換して，知識ベース\n(１)に記述する。\n【００２６】その後，知識の変更に際しては，例えば，知識の階層構造を変更す\nる場合には，階層構造定義装置(５)を用いてデータベース(４)の該当箇所を書き\n換えるだけで，知識ベース(１)の階層構造が変更されることになる。又，あるノ\nードの知識を変更する場合は，詳細知識定義装置(６)を用いてデータベース(４)\nの該当箇所を書き換えるだけで，これが知識ベース(１)の知識に反映される。\n【００２７】例えば，図４に示す如く取っ手(12)を具えた内箱(11)と外箱(10)か\nらなる引き出し(９)を設計する場合，階層構造定義装置(５)の操作によって，図\n５に示す５つのノード名称(“引き出し”  “内箱”“外箱”“取っ手”“内箱本\n体”)が定義され，これらのノードに図示の如き階層構造が定義される。\n【００２８】その後，詳細知識定義装置(６)の操作によって，図６に示す如く各\nノードに詳細知識が定義される。この作業は，下位のノードから上位のノードへ\n向かって進められる。例えば，“取っ手”は，予め規定された形状のものを用い\nるので，全ての属性値を自己のノードにて決めることが出来る。従って，属性は\n決定属性のみから構成される。\n【００２９】一方，“内箱本体”は，その大きさが上位の部品の大きさから決定\nされるべきものであるから，“高さ”“幅”“長さ”は親ノードである“内箱”\nに委ねられる。“外箱”についても同様である。\n【００３０】“内箱”のノードでは，“内箱本体”に入力すべき３つの属性(“高\nさ”“幅”“長さ”)を自己の大きさから決定する。又，“内箱”自身の大きさは，\n親ノードである“引き出し”にその決定を委ねる。\n【００３１】この様にして全てのデータ入力作業が終了すれば，データベース内\nには，図６に示す如きイメージでデータ構造が登録され，最上位のノードである\n“引き出し”の“高さ”“幅”“長さ”が，知識ベースに対する入力データとな\nる。\n【００３２】上記知識ベース構築システムは，データベース(４)のデータ構造が\n知識ベースに比べて簡単であるため，知識記述言語についての知識や経験を有し\nない知識所有者であっても，階層構造定義装置(５)，詳細知識定義装置(６)及び\n知識参照装置(７)を操作することによって，容易に知識ベース(１)を構築するこ\nとが出来る。又，従来の如き知識獲得の作業が不要であるから，知識ベース構築\nのための処理が簡略化される。更に，知識の体系化と知識の記述の両プロセスが\n共に共通のデータベースを用いて行なわれるため，知識の追加や修正が従来に比\nべて遥かに容易となる。\n【００３３】上記実施例の説明は，本発明を説明するためのものであって，特許\n請求の範囲に記載の発明を限定し，或は範囲を減縮する様に解すべきではない。\n又，本発明の各部構成は上記実施例に限らず，特許請求の範囲に記載の技術的範\n囲内で種々の変形が可能であることは勿論である。\n【図１】\n【図２】\n【図３】\n【図４】\n【図５】\n【図６】\n【図７】\n"
}